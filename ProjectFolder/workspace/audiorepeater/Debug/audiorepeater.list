
audiorepeater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00039448  08007a20  08007a20  00017a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040e68  08040e68  00060090  2**0
                  CONTENTS
  4 .ARM          00000008  08040e68  08040e68  00050e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08040e70  08040e70  00060090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08040e70  08040e70  00050e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040e74  08040e74  00050e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08040e78  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000090  08040f08  00060090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008ac  08040f08  000608ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb2e  00000000  00000000  000600c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a21  00000000  00000000  0007cbee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001638  00000000  00000000  00080610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00081c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d6b  00000000  00000000  00083100  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013bfa  00000000  00000000  000a6e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d27f6  00000000  00000000  000baa65  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0018d25b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f64  00000000  00000000  0018d2d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a08 	.word	0x08007a08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007a08 	.word	0x08007a08

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd42 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f816 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f982 	bl	80007dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f894 	bl	8000604 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8c0 	bl	8000660 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8ee 	bl	80006c0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f006 fee0 	bl	80072a8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e8:	f000 f920 	bl	800072c <MX_TIM2_Init>
  {
    /* USER CODE END WHILE */
   // MX_USB_HOST_Process();

    /* USER CODE BEGIN 3 */
    startPlayback(sample, sizeof(sample));
 80004ec:	4902      	ldr	r1, [pc, #8]	; (80004f8 <main+0x30>)
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <main+0x34>)
 80004f0:	f000 facc 	bl	8000a8c <startPlayback>
 80004f4:	e7fa      	b.n	80004ec <main+0x24>
 80004f6:	bf00      	nop
 80004f8:	0003942c 	.word	0x0003942c
 80004fc:	08007a24 	.word	0x08007a24

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b098      	sub	sp, #96	; 0x60
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f007 f9b8 	bl	8007884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <SystemClock_Config+0xfc>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	4a30      	ldr	r2, [pc, #192]	; (80005fc <SystemClock_Config+0xfc>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	6413      	str	r3, [r2, #64]	; 0x40
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <SystemClock_Config+0xfc>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemClock_Config+0x100>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <SystemClock_Config+0x100>)
 8000558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0x100>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057e:	2308      	movs	r3, #8
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000582:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fae3 	bl	8003b60 <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005a0:	f000 faa2 	bl	8000ae8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	2105      	movs	r1, #5
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fd3c 	bl	8004040 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ce:	f000 fa8b 	bl	8000ae8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005d6:	23c0      	movs	r3, #192	; 0xc0
 80005d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 ff0a 	bl	80043fc <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005ee:	f000 fa7b 	bl	8000ae8 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3760      	adds	r7, #96	; 0x60
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f002 fcb5 	bl	8002fb0 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 fa4c 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000d0 	.word	0x200000d0
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000664:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000666:	4a14      	ldr	r2, [pc, #80]	; (80006b8 <MX_I2S3_Init+0x58>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800066a:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <MX_I2S3_Init+0x54>)
 800066c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000670:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <MX_I2S3_Init+0x54>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000684:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000688:	4a0c      	ldr	r2, [pc, #48]	; (80006bc <MX_I2S3_Init+0x5c>)
 800068a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800068c:	4b09      	ldr	r3, [pc, #36]	; (80006b4 <MX_I2S3_Init+0x54>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_I2S3_Init+0x54>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <MX_I2S3_Init+0x54>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <MX_I2S3_Init+0x54>)
 80006a0:	f002 fdbe 	bl	8003220 <HAL_I2S_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006aa:	f000 fa1d 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	200001c0 	.word	0x200001c0
 80006b8:	40003c00 	.word	0x40003c00
 80006bc:	00017700 	.word	0x00017700

080006c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <MX_SPI1_Init+0x64>)
 80006c6:	4a18      	ldr	r2, [pc, #96]	; (8000728 <MX_SPI1_Init+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	4b16      	ldr	r3, [pc, #88]	; (8000724 <MX_SPI1_Init+0x64>)
 80006cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006d2:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_SPI1_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_SPI1_Init+0x64>)
 80006ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_SPI1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_SPI1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_SPI1_Init+0x64>)
 800070c:	220a      	movs	r2, #10
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_SPI1_Init+0x64>)
 8000712:	f003 ffb1 	bl	8004678 <HAL_SPI_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800071c:	f000 f9e4 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000128 	.word	0x20000128
 8000728:	40013000 	.word	0x40013000

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_TIM2_Init+0xac>)
 8000750:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000754:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_TIM2_Init+0xac>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_TIM2_Init+0xac>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5250;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_TIM2_Init+0xac>)
 8000764:	f241 4282 	movw	r2, #5250	; 0x1482
 8000768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_TIM2_Init+0xac>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_TIM2_Init+0xac>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000776:	4818      	ldr	r0, [pc, #96]	; (80007d8 <MX_TIM2_Init+0xac>)
 8000778:	f003 ffe2 	bl	8004740 <HAL_TIM_PWM_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000782:	f000 f9b1 	bl	8000ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4619      	mov	r1, r3
 8000794:	4810      	ldr	r0, [pc, #64]	; (80007d8 <MX_TIM2_Init+0xac>)
 8000796:	f004 fd89 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80007a0:	f000 f9a2 	bl	8000ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007a4:	2360      	movs	r3, #96	; 0x60
 80007a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <MX_TIM2_Init+0xac>)
 80007bc:	f004 fa12 	bl	8004be4 <HAL_TIM_PWM_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80007c6:	f000 f98f 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <MX_TIM2_Init+0xac>)
 80007cc:	f000 fad6 	bl	8000d7c <HAL_TIM_MspPostInit>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000180 	.word	0x20000180

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	; 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4b71      	ldr	r3, [pc, #452]	; (80009bc <MX_GPIO_Init+0x1e0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a70      	ldr	r2, [pc, #448]	; (80009bc <MX_GPIO_Init+0x1e0>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b6e      	ldr	r3, [pc, #440]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b6a      	ldr	r3, [pc, #424]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a69      	ldr	r2, [pc, #420]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b67      	ldr	r3, [pc, #412]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b63      	ldr	r3, [pc, #396]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a62      	ldr	r2, [pc, #392]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b60      	ldr	r3, [pc, #384]	; (80009bc <MX_GPIO_Init+0x1e0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <MX_GPIO_Init+0x1e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a5b      	ldr	r2, [pc, #364]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b59      	ldr	r3, [pc, #356]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a54      	ldr	r2, [pc, #336]	; (80009bc <MX_GPIO_Init+0x1e0>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b52      	ldr	r3, [pc, #328]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b4e      	ldr	r3, [pc, #312]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a4d      	ldr	r2, [pc, #308]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000888:	f043 0308 	orr.w	r3, r3, #8
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b4b      	ldr	r3, [pc, #300]	; (80009bc <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	4848      	ldr	r0, [pc, #288]	; (80009c0 <MX_GPIO_Init+0x1e4>)
 80008a0:	f000 fe98 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2101      	movs	r1, #1
 80008a8:	4846      	ldr	r0, [pc, #280]	; (80009c4 <MX_GPIO_Init+0x1e8>)
 80008aa:	f000 fe93 	bl	80015d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ae:	2200      	movs	r2, #0
 80008b0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008b4:	4844      	ldr	r0, [pc, #272]	; (80009c8 <MX_GPIO_Init+0x1ec>)
 80008b6:	f000 fe8d 	bl	80015d4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	483b      	ldr	r0, [pc, #236]	; (80009c0 <MX_GPIO_Init+0x1e4>)
 80008d2:	f000 fce5 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4835      	ldr	r0, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x1e8>)
 80008ee:	f000 fcd7 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008f2:	2308      	movs	r3, #8
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x1e8>)
 800090e:	f000 fcc7 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000912:	2301      	movs	r3, #1
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_GPIO_Init+0x1f0>)
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	482a      	ldr	r0, [pc, #168]	; (80009d0 <MX_GPIO_Init+0x1f4>)
 8000926:	f000 fcbb 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092a:	2304      	movs	r3, #4
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4825      	ldr	r0, [pc, #148]	; (80009d4 <MX_GPIO_Init+0x1f8>)
 800093e:	f000 fcaf 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000954:	2305      	movs	r3, #5
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481d      	ldr	r0, [pc, #116]	; (80009d4 <MX_GPIO_Init+0x1f8>)
 8000960:	f000 fc9e 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000964:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000968:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	2301      	movs	r3, #1
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x1ec>)
 800097e:	f000 fc8f 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000982:	2320      	movs	r3, #32
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <MX_GPIO_Init+0x1ec>)
 8000996:	f000 fc83 	bl	80012a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800099a:	2302      	movs	r3, #2
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099e:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <MX_GPIO_Init+0x1f0>)
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_GPIO_Init+0x1e4>)
 80009ae:	f000 fc77 	bl	80012a0 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	10120000 	.word	0x10120000
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

	uint16_t dialdownval = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	81fb      	strh	r3, [r7, #14]
	float tempdialdown = 0;
 80009e4:	f04f 0300 	mov.w	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]

	tempdialdown = 5250*sounddata_data[current_pos]/65535;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <HAL_TIM_PWM_PulseFinishedCallback+0x9c>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	f241 4382 	movw	r3, #5250	; 0x1482
 80009fe:	fb03 f302 	mul.w	r3, r3, r2
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_TIM_PWM_PulseFinishedCallback+0xa4>)
 8000a04:	fb82 1203 	smull	r1, r2, r2, r3
 8000a08:	441a      	add	r2, r3
 8000a0a:	13d2      	asrs	r2, r2, #15
 8000a0c:	17db      	asrs	r3, r3, #31
 8000a0e:	1ad3      	subs	r3, r2, r3
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a18:	edc7 7a02 	vstr	s15, [r7, #8]
	dialdownval = (uint16_t)tempdialdown;
 8000a1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a24:	ee17 3a90 	vmov	r3, s15
 8000a28:	81fb      	strh	r3, [r7, #14]
	if(htim->Instance == TIM2)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a32:	d11a      	bne.n	8000a6a <HAL_TIM_PWM_PulseFinishedCallback+0x92>
	{
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,dialdownval);
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	89fa      	ldrh	r2, [r7, #14]
 8000a3a:	635a      	str	r2, [r3, #52]	; 0x34
		current_pos++;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	3301      	adds	r3, #1
 8000a42:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000a44:	6013      	str	r3, [r2, #0]
		if(current_pos == sounddata_length)
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_TIM_PWM_PulseFinishedCallback+0xa0>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	d10b      	bne.n	8000a6a <HAL_TIM_PWM_PulseFinishedCallback+0x92>
		{
			main_u8flgPlaybackstart = 0;
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
			if(HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4809      	ldr	r0, [pc, #36]	; (8000a80 <HAL_TIM_PWM_PulseFinishedCallback+0xa8>)
 8000a5c:	f003 ff20 	bl	80048a0 <HAL_TIM_PWM_Stop_IT>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_TIM_PWM_PulseFinishedCallback+0x92>
			{
				Error_Handler();
 8000a66:	f000 f83f 	bl	8000ae8 <Error_Handler>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000ac 	.word	0x200000ac
 8000a78:	200000b4 	.word	0x200000b4
 8000a7c:	80008001 	.word	0x80008001
 8000a80:	20000180 	.word	0x20000180
 8000a84:	200000b0 	.word	0x200000b0
 8000a88:	200000b8 	.word	0x200000b8

08000a8c <startPlayback>:
void startPlayback(const uint16_t *data, uint32_t length)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	if(main_u8flgPlaybackstart!=1)
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <startPlayback+0x48>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d014      	beq.n	8000aca <startPlayback+0x3e>
	{
		sounddata_data = data;
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	; (8000ad8 <startPlayback+0x4c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
		sounddata_length = length;
 8000aa6:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <startPlayback+0x50>)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	6013      	str	r3, [r2, #0]
		current_pos = 0;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <startPlayback+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
		if(HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <startPlayback+0x58>)
 8000ab6:	f003 fe6f 	bl	8004798 <HAL_TIM_PWM_Start_IT>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <startPlayback+0x38>
		{
			Error_Handler();
 8000ac0:	f000 f812 	bl	8000ae8 <Error_Handler>
		}
		main_u8flgPlaybackstart = 1;
 8000ac4:	4b03      	ldr	r3, [pc, #12]	; (8000ad4 <startPlayback+0x48>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	701a      	strb	r2, [r3, #0]
	}
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000b8 	.word	0x200000b8
 8000ad8:	200000ac 	.word	0x200000ac
 8000adc:	200000b0 	.word	0x200000b0
 8000ae0:	200000b4 	.word	0x200000b4
 8000ae4:	20000180 	.word	0x20000180

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aee:	e7fe      	b.n	8000aee <Error_Handler+0x6>

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fb74 	bl	800121c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12c      	bne.n	8000bbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480c      	ldr	r0, [pc, #48]	; (8000bcc <HAL_I2C_MspInit+0x8c>)
 8000b9c:	f000 fb80 	bl	80012a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_I2C_MspInit+0x88>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bbc:	bf00      	nop
 8000bbe:	3728      	adds	r7, #40	; 0x28
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40005400 	.word	0x40005400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020400 	.word	0x40020400

08000bd0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	; 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a28      	ldr	r2, [pc, #160]	; (8000c90 <HAL_I2S_MspInit+0xc0>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d14a      	bne.n	8000c88 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b27      	ldr	r3, [pc, #156]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	4a26      	ldr	r2, [pc, #152]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c00:	6413      	str	r3, [r2, #64]	; 0x40
 8000c02:	4b24      	ldr	r3, [pc, #144]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <HAL_I2S_MspInit+0xc4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c46:	2310      	movs	r3, #16
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c56:	2306      	movs	r3, #6
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <HAL_I2S_MspInit+0xc8>)
 8000c62:	f000 fb1d 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c66:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c78:	2306      	movs	r3, #6
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <HAL_I2S_MspInit+0xcc>)
 8000c84:	f000 fb0c 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40003c00 	.word	0x40003c00
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020000 	.word	0x40020000
 8000c9c:	40020800 	.word	0x40020800

08000ca0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <HAL_SPI_MspInit+0x84>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d12b      	bne.n	8000d1a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a17      	ldr	r2, [pc, #92]	; (8000d28 <HAL_SPI_MspInit+0x88>)
 8000ccc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <HAL_SPI_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <HAL_SPI_MspInit+0x88>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_SPI_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cfa:	23e0      	movs	r3, #224	; 0xe0
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <HAL_SPI_MspInit+0x8c>)
 8000d16:	f000 fac3 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40013000 	.word	0x40013000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020000 	.word	0x40020000

08000d30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d40:	d115      	bne.n	8000d6e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <HAL_TIM_PWM_MspInit+0x48>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <HAL_TIM_PWM_MspInit+0x48>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_TIM_PWM_MspInit+0x48>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2100      	movs	r1, #0
 8000d62:	201c      	movs	r0, #28
 8000d64:	f000 fa65 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d68:	201c      	movs	r0, #28
 8000d6a:	f000 fa7e 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d9c:	d11e      	bne.n	8000ddc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b10      	ldr	r3, [pc, #64]	; (8000de4 <HAL_TIM_MspPostInit+0x68>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a0f      	ldr	r2, [pc, #60]	; (8000de4 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <HAL_TIM_MspPostInit+0x68>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dbe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4804      	ldr	r0, [pc, #16]	; (8000de8 <HAL_TIM_MspPostInit+0x6c>)
 8000dd8:	f000 fa62 	bl	80012a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f8de 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <TIM2_IRQHandler+0x10>)
 8000e46:	f003 fdc5 	bl	80049d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000180 	.word	0x20000180

08000e54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <OTG_FS_IRQHandler+0x10>)
 8000e5a:	f000 fe63 	bl	8001b24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200005e4 	.word	0x200005e4

08000e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e70:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <_sbrk+0x5c>)
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <_sbrk+0x60>)
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e7c:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d102      	bne.n	8000e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_sbrk+0x64>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	; (8000ed0 <_sbrk+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8a:	4b10      	ldr	r3, [pc, #64]	; (8000ecc <_sbrk+0x64>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4413      	add	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d207      	bcs.n	8000ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e98:	f006 fcba 	bl	8007810 <__errno>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea6:	e009      	b.n	8000ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea8:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <_sbrk+0x64>)
 8000eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20020000 	.word	0x20020000
 8000ec8:	00000400 	.word	0x00000400
 8000ecc:	200000bc 	.word	0x200000bc
 8000ed0:	200008b0 	.word	0x200008b0

08000ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <SystemInit+0x28>)
 8000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ede:	4a07      	ldr	r2, [pc, #28]	; (8000efc <SystemInit+0x28>)
 8000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SystemInit+0x28>)
 8000eea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eee:	609a      	str	r2, [r3, #8]
#endif
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f06:	e003      	b.n	8000f10 <LoopCopyDataInit>

08000f08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f0e:	3104      	adds	r1, #4

08000f10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f18:	d3f6      	bcc.n	8000f08 <CopyDataInit>
  ldr  r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f1c:	e002      	b.n	8000f24 <LoopFillZerobss>

08000f1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f20:	f842 3b04 	str.w	r3, [r2], #4

08000f24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f28:	d3f9      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd3 	bl	8000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f006 fc75 	bl	800781c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fac9 	bl	80004c8 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f3c:	08040e78 	.word	0x08040e78
  ldr  r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f44:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f48:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f4c:	200008ac 	.word	0x200008ac

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f94d 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fdb2 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f965 	bl	8001286 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f92d 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	20000208 	.word	0x20000208

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000208 	.word	0x20000208

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_Delay+0x40>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	; (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	; (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	; (800116c <__NVIC_SetPriority+0x50>)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	; 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	; (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001244:	f7ff ff3e 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68b9      	ldr	r1, [r7, #8]
 800124e:	6978      	ldr	r0, [r7, #20]
 8001250:	f7ff ff8e 	bl	8001170 <NVIC_EncodePriority>
 8001254:	4602      	mov	r2, r0
 8001256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff5d 	bl	800111c <__NVIC_SetPriority>
}
 8001262:	bf00      	nop
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff31 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ffa2 	bl	80011d8 <SysTick_Config>
 8001294:	4603      	mov	r3, r0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	e16b      	b.n	8001594 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012bc:	2201      	movs	r2, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f040 815a 	bne.w	800158e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d00b      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d007      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012ee:	2b11      	cmp	r3, #17
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b12      	cmp	r3, #18
 80012f8:	d130      	bne.n	800135c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	2203      	movs	r2, #3
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001330:	2201      	movs	r2, #1
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 0201 	and.w	r2, r3, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b02      	cmp	r3, #2
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0xfc>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b12      	cmp	r3, #18
 800139a:	d123      	bne.n	80013e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	08da      	lsrs	r2, r3, #3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3208      	adds	r2, #8
 80013a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	08da      	lsrs	r2, r3, #3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3208      	adds	r2, #8
 80013de:	69b9      	ldr	r1, [r7, #24]
 80013e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 80b4 	beq.w	800158e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_GPIO_Init+0x308>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_GPIO_Init+0x308>)
 8001430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_GPIO_Init+0x308>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001442:	4a5a      	ldr	r2, [pc, #360]	; (80015ac <HAL_GPIO_Init+0x30c>)
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	220f      	movs	r2, #15
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a51      	ldr	r2, [pc, #324]	; (80015b0 <HAL_GPIO_Init+0x310>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d02b      	beq.n	80014c6 <HAL_GPIO_Init+0x226>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a50      	ldr	r2, [pc, #320]	; (80015b4 <HAL_GPIO_Init+0x314>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d025      	beq.n	80014c2 <HAL_GPIO_Init+0x222>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4f      	ldr	r2, [pc, #316]	; (80015b8 <HAL_GPIO_Init+0x318>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d01f      	beq.n	80014be <HAL_GPIO_Init+0x21e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4e      	ldr	r2, [pc, #312]	; (80015bc <HAL_GPIO_Init+0x31c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d019      	beq.n	80014ba <HAL_GPIO_Init+0x21a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4d      	ldr	r2, [pc, #308]	; (80015c0 <HAL_GPIO_Init+0x320>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d013      	beq.n	80014b6 <HAL_GPIO_Init+0x216>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4c      	ldr	r2, [pc, #304]	; (80015c4 <HAL_GPIO_Init+0x324>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d00d      	beq.n	80014b2 <HAL_GPIO_Init+0x212>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4b      	ldr	r2, [pc, #300]	; (80015c8 <HAL_GPIO_Init+0x328>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d007      	beq.n	80014ae <HAL_GPIO_Init+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4a      	ldr	r2, [pc, #296]	; (80015cc <HAL_GPIO_Init+0x32c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d101      	bne.n	80014aa <HAL_GPIO_Init+0x20a>
 80014a6:	2307      	movs	r3, #7
 80014a8:	e00e      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014aa:	2308      	movs	r3, #8
 80014ac:	e00c      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014ae:	2306      	movs	r3, #6
 80014b0:	e00a      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014b2:	2305      	movs	r3, #5
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x228>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4934      	ldr	r1, [pc, #208]	; (80015ac <HAL_GPIO_Init+0x30c>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_GPIO_Init+0x330>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150a:	4a31      	ldr	r2, [pc, #196]	; (80015d0 <HAL_GPIO_Init+0x330>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001534:	4a26      	ldr	r2, [pc, #152]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153a:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <HAL_GPIO_Init+0x330>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_GPIO_Init+0x330>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_GPIO_Init+0x330>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f ae90 	bls.w	80012bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	3724      	adds	r7, #36	; 0x24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40021400 	.word	0x40021400
 80015c8:	40021800 	.word	0x40021800
 80015cc:	40021c00 	.word	0x40021c00
 80015d0:	40013c00 	.word	0x40013c00

080015d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
 80015e0:	4613      	mov	r3, r2
 80015e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015e4:	787b      	ldrb	r3, [r7, #1]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f0:	e003      	b.n	80015fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	041a      	lsls	r2, r3, #16
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	619a      	str	r2, [r3, #24]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001608:	b08f      	sub	sp, #60	; 0x3c
 800160a:	af0a      	add	r7, sp, #40	; 0x28
 800160c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e054      	b.n	80016c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d106      	bne.n	8001638 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f005 fe8c 	bl	8007350 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2203      	movs	r2, #3
 800163c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d102      	bne.n	8001652 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f003 ff2a 	bl	80054b0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	687e      	ldr	r6, [r7, #4]
 8001664:	466d      	mov	r5, sp
 8001666:	f106 0410 	add.w	r4, r6, #16
 800166a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001676:	e885 0003 	stmia.w	r5, {r0, r1}
 800167a:	1d33      	adds	r3, r6, #4
 800167c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	f003 fea4 	bl	80053cc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f003 ff21 	bl	80054d2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	687e      	ldr	r6, [r7, #4]
 8001698:	466d      	mov	r5, sp
 800169a:	f106 0410 	add.w	r4, r6, #16
 800169e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80016ae:	1d33      	adds	r3, r6, #4
 80016b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f004 f834 	bl	8005720 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016ca:	b590      	push	{r4, r7, lr}
 80016cc:	b089      	sub	sp, #36	; 0x24
 80016ce:	af04      	add	r7, sp, #16
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	4608      	mov	r0, r1
 80016d4:	4611      	mov	r1, r2
 80016d6:	461a      	mov	r2, r3
 80016d8:	4603      	mov	r3, r0
 80016da:	70fb      	strb	r3, [r7, #3]
 80016dc:	460b      	mov	r3, r1
 80016de:	70bb      	strb	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_HCD_HC_Init+0x28>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e07f      	b.n	80017f2 <HAL_HCD_HC_Init+0x128>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	333d      	adds	r3, #61	; 0x3d
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3338      	adds	r3, #56	; 0x38
 800171e:	787a      	ldrb	r2, [r7, #1]
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3340      	adds	r3, #64	; 0x40
 8001732:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001734:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	440b      	add	r3, r1
 8001744:	3339      	adds	r3, #57	; 0x39
 8001746:	78fa      	ldrb	r2, [r7, #3]
 8001748:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800174a:	78fa      	ldrb	r2, [r7, #3]
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	333f      	adds	r3, #63	; 0x3f
 800175a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800175e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001760:	78fa      	ldrb	r2, [r7, #3]
 8001762:	78bb      	ldrb	r3, [r7, #2]
 8001764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001768:	b2d8      	uxtb	r0, r3
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	333a      	adds	r3, #58	; 0x3a
 8001778:	4602      	mov	r2, r0
 800177a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800177c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001780:	2b00      	cmp	r3, #0
 8001782:	da0a      	bge.n	800179a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	440b      	add	r3, r1
 8001792:	333b      	adds	r3, #59	; 0x3b
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
 8001798:	e009      	b.n	80017ae <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800179a:	78fa      	ldrb	r2, [r7, #3]
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	440b      	add	r3, r1
 80017a8:	333b      	adds	r3, #59	; 0x3b
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017ae:	78fa      	ldrb	r2, [r7, #3]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	440b      	add	r3, r1
 80017bc:	333c      	adds	r3, #60	; 0x3c
 80017be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017c2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	787c      	ldrb	r4, [r7, #1]
 80017ca:	78ba      	ldrb	r2, [r7, #2]
 80017cc:	78f9      	ldrb	r1, [r7, #3]
 80017ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017d0:	9302      	str	r3, [sp, #8]
 80017d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4623      	mov	r3, r4
 80017e0:	f004 f8de 	bl	80059a0 <USB_HC_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}

080017fa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_HCD_HC_Halt+0x1e>
 8001814:	2302      	movs	r3, #2
 8001816:	e00f      	b.n	8001838 <HAL_HCD_HC_Halt+0x3e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	78fa      	ldrb	r2, [r7, #3]
 8001826:	4611      	mov	r1, r2
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fb1a 	bl	8005e62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001836:	7bfb      	ldrb	r3, [r7, #15]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	70fb      	strb	r3, [r7, #3]
 8001852:	460b      	mov	r3, r1
 8001854:	70bb      	strb	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800185a:	78fa      	ldrb	r2, [r7, #3]
 800185c:	6879      	ldr	r1, [r7, #4]
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	440b      	add	r3, r1
 8001868:	333b      	adds	r3, #59	; 0x3b
 800186a:	78ba      	ldrb	r2, [r7, #2]
 800186c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	440b      	add	r3, r1
 800187c:	333f      	adds	r3, #63	; 0x3f
 800187e:	787a      	ldrb	r2, [r7, #1]
 8001880:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001882:	7c3b      	ldrb	r3, [r7, #16]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d114      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001888:	78fa      	ldrb	r2, [r7, #3]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3342      	adds	r3, #66	; 0x42
 8001898:	2203      	movs	r2, #3
 800189a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	333d      	adds	r3, #61	; 0x3d
 80018ac:	7f3a      	ldrb	r2, [r7, #28]
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e009      	b.n	80018c6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018c6:	787b      	ldrb	r3, [r7, #1]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	f200 80d6 	bhi.w	8001a7a <HAL_HCD_HC_SubmitRequest+0x23a>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	08001a65 	.word	0x08001a65
 80018dc:	08001951 	.word	0x08001951
 80018e0:	080019db 	.word	0x080019db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018e4:	7c3b      	ldrb	r3, [r7, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	f040 80c9 	bne.w	8001a7e <HAL_HCD_HC_SubmitRequest+0x23e>
 80018ec:	78bb      	ldrb	r3, [r7, #2]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80c5 	bne.w	8001a7e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80018f4:	8b3b      	ldrh	r3, [r7, #24]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3351      	adds	r3, #81	; 0x51
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190e:	78fa      	ldrb	r2, [r7, #3]
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	4613      	mov	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	3351      	adds	r3, #81	; 0x51
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d10a      	bne.n	800193a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3342      	adds	r3, #66	; 0x42
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001938:	e0a1      	b.n	8001a7e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800193a:	78fa      	ldrb	r2, [r7, #3]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3342      	adds	r3, #66	; 0x42
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
      break;
 800194e:	e096      	b.n	8001a7e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d120      	bne.n	8001998 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001956:	78fa      	ldrb	r2, [r7, #3]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	3351      	adds	r3, #81	; 0x51
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10a      	bne.n	8001982 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	3342      	adds	r3, #66	; 0x42
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001980:	e07e      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4413      	add	r3, r2
 800198c:	00db      	lsls	r3, r3, #3
 800198e:	440b      	add	r3, r1
 8001990:	3342      	adds	r3, #66	; 0x42
 8001992:	2202      	movs	r2, #2
 8001994:	701a      	strb	r2, [r3, #0]
      break;
 8001996:	e073      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001998:	78fa      	ldrb	r2, [r7, #3]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	00db      	lsls	r3, r3, #3
 80019a4:	440b      	add	r3, r1
 80019a6:	3350      	adds	r3, #80	; 0x50
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10a      	bne.n	80019c4 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ae:	78fa      	ldrb	r2, [r7, #3]
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	440b      	add	r3, r1
 80019bc:	3342      	adds	r3, #66	; 0x42
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
      break;
 80019c2:	e05d      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c4:	78fa      	ldrb	r2, [r7, #3]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	440b      	add	r3, r1
 80019d2:	3342      	adds	r3, #66	; 0x42
 80019d4:	2202      	movs	r2, #2
 80019d6:	701a      	strb	r2, [r3, #0]
      break;
 80019d8:	e052      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019da:	78bb      	ldrb	r3, [r7, #2]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d120      	bne.n	8001a22 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	440b      	add	r3, r1
 80019ee:	3351      	adds	r3, #81	; 0x51
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10a      	bne.n	8001a0c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	3342      	adds	r3, #66	; 0x42
 8001a06:	2200      	movs	r2, #0
 8001a08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a0a:	e039      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	3342      	adds	r3, #66	; 0x42
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	701a      	strb	r2, [r3, #0]
      break;
 8001a20:	e02e      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a22:	78fa      	ldrb	r2, [r7, #3]
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3350      	adds	r3, #80	; 0x50
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10a      	bne.n	8001a4e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a38:	78fa      	ldrb	r2, [r7, #3]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3342      	adds	r3, #66	; 0x42
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
      break;
 8001a4c:	e018      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a4e:	78fa      	ldrb	r2, [r7, #3]
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3342      	adds	r3, #66	; 0x42
 8001a5e:	2202      	movs	r2, #2
 8001a60:	701a      	strb	r2, [r3, #0]
      break;
 8001a62:	e00d      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	3342      	adds	r3, #66	; 0x42
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
      break;
 8001a78:	e002      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001a7a:	bf00      	nop
 8001a7c:	e000      	b.n	8001a80 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001a7e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3344      	adds	r3, #68	; 0x44
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	8b39      	ldrh	r1, [r7, #24]
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4403      	add	r3, r0
 8001aa4:	3348      	adds	r3, #72	; 0x48
 8001aa6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	335c      	adds	r3, #92	; 0x5c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	334c      	adds	r3, #76	; 0x4c
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ad0:	78fa      	ldrb	r2, [r7, #3]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3339      	adds	r3, #57	; 0x39
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	335d      	adds	r3, #93	; 0x5d
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	3338      	adds	r3, #56	; 0x38
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	18d1      	adds	r1, r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	f004 f84e 	bl	8005bb4 <USB_HC_StartXfer>
 8001b18:	4603      	mov	r3, r0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop

08001b24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f003 fdad 	bl	800569a <USB_GetMode>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 80ef 	bne.w	8001d26 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f003 fd91 	bl	8005674 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80e5 	beq.w	8001d24 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fd88 	bl	8005674 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b6e:	d104      	bne.n	8001b7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fd78 	bl	8005674 <USB_ReadInterrupts>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b8e:	d104      	bne.n	8001b9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fd68 	bl	8005674 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001baa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001bae:	d104      	bne.n	8001bba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f003 fd58 	bl	8005674 <USB_ReadInterrupts>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d103      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 fd4a 	bl	8005674 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bea:	d115      	bne.n	8001c18 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bf4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d108      	bne.n	8001c18 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f005 fc20 	bl	800744c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 fe40 	bl	8005898 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fd29 	bl	8005674 <USB_ReadInterrupts>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c2c:	d102      	bne.n	8001c34 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f001 f94a 	bl	8002ec8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fd1b 	bl	8005674 <USB_ReadInterrupts>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	f003 0308 	and.w	r3, r3, #8
 8001c44:	2b08      	cmp	r3, #8
 8001c46:	d106      	bne.n	8001c56 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f005 fbe3 	bl	8007414 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2208      	movs	r2, #8
 8001c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 fd0a 	bl	8005674 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c6a:	d138      	bne.n	8001cde <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 f8e5 	bl	8005e40 <USB_HC_ReadInterrupt>
 8001c76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e025      	b.n	8001cca <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d018      	beq.n	8001cc4 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8b3 	bl	8001e1c <HCD_HC_IN_IRQHandler>
 8001cb6:	e005      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fce1 	bl	8002686 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3d4      	bcc.n	8001c7e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 fcc6 	bl	8005674 <USB_ReadInterrupts>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b10      	cmp	r3, #16
 8001cf0:	d101      	bne.n	8001cf6 <HAL_HCD_IRQHandler+0x1d2>
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_HCD_IRQHandler+0x1d4>
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d014      	beq.n	8001d26 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0210 	bic.w	r2, r2, #16
 8001d0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f001 f82f 	bl	8002d70 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0210 	orr.w	r2, r2, #16
 8001d20:	619a      	str	r2, [r3, #24]
 8001d22:	e000      	b.n	8001d26 <HAL_HCD_IRQHandler+0x202>
      return;
 8001d24:	bf00      	nop
    }
  }
}
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_HCD_Start+0x16>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e013      	b.n	8001d6a <HAL_HCD_Start+0x3e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f003 fb9d 	bl	800548e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fdd6 	bl	800590c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_HCD_Stop+0x16>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e00d      	b.n	8001da4 <HAL_HCD_Stop+0x32>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f004 f99f 	bl	80060d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	335c      	adds	r3, #92	; 0x5c
 8001dc8:	781b      	ldrb	r3, [r3, #0]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	334c      	adds	r3, #76	; 0x4c
 8001df2:	681b      	ldr	r3, [r3, #0]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fdb6 	bl	800597e <USB_GetCurrentFrame>
 8001e12:	4603      	mov	r3, r0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d119      	bne.n	8001e80 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2304      	movs	r3, #4
 8001e5c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	015a      	lsls	r2, r3, #5
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4413      	add	r3, r2
 8001e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	0151      	lsls	r1, r2, #5
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	440a      	add	r2, r1
 8001e74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	60d3      	str	r3, [r2, #12]
 8001e7e:	e0ce      	b.n	800201e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e96:	d12c      	bne.n	8001ef2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	015a      	lsls	r2, r3, #5
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eaa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	440b      	add	r3, r1
 8001eba:	335d      	adds	r3, #93	; 0x5d
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	015a      	lsls	r2, r3, #5
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	0151      	lsls	r1, r2, #5
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	440a      	add	r2, r1
 8001ed6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eda:	f043 0302 	orr.w	r3, r3, #2
 8001ede:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f003 ffb9 	bl	8005e62 <USB_HC_Halt>
 8001ef0:	e095      	b.n	800201e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	015a      	lsls	r2, r3, #5
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4413      	add	r3, r2
 8001efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 0320 	and.w	r3, r3, #32
 8001f04:	2b20      	cmp	r3, #32
 8001f06:	d109      	bne.n	8001f1c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	461a      	mov	r2, r3
 8001f16:	2320      	movs	r3, #32
 8001f18:	6093      	str	r3, [r2, #8]
 8001f1a:	e080      	b.n	800201e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d134      	bne.n	8001f9c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	0151      	lsls	r1, r2, #5
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	440a      	add	r2, r1
 8001f48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	335d      	adds	r3, #93	; 0x5d
 8001f62:	2205      	movs	r2, #5
 8001f64:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f72:	461a      	mov	r2, r3
 8001f74:	2310      	movs	r3, #16
 8001f76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	015a      	lsls	r2, r3, #5
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	4413      	add	r3, r2
 8001f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f84:	461a      	mov	r2, r3
 8001f86:	2308      	movs	r3, #8
 8001f88:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	4611      	mov	r1, r2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 ff64 	bl	8005e62 <USB_HC_Halt>
 8001f9a:	e040      	b.n	800201e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	015a      	lsls	r2, r3, #5
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d134      	bne.n	800201e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	0151      	lsls	r1, r2, #5
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	440a      	add	r2, r1
 8001fca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	4611      	mov	r1, r2
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 ff3f 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	335d      	adds	r3, #93	; 0x5d
 8002006:	2208      	movs	r2, #8
 8002008:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	461a      	mov	r2, r3
 8002018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800201c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	015a      	lsls	r2, r3, #5
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4413      	add	r3, r2
 8002026:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d122      	bne.n	800207c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	0151      	lsls	r1, r2, #5
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	440a      	add	r2, r1
 800204c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fefe 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4413      	add	r3, r2
 800206e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002072:	461a      	mov	r2, r3
 8002074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002078:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800207a:	e300      	b.n	800267e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b01      	cmp	r3, #1
 8002090:	f040 80fd 	bne.w	800228e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	3348      	adds	r3, #72	; 0x48
 80020ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0159      	lsls	r1, r3, #5
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	440b      	add	r3, r1
 80020b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020c0:	1ad1      	subs	r1, r2, r3
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4403      	add	r3, r0
 80020d0:	334c      	adds	r3, #76	; 0x4c
 80020d2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	335d      	adds	r3, #93	; 0x5d
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	3358      	adds	r3, #88	; 0x58
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002108:	461a      	mov	r2, r3
 800210a:	2301      	movs	r3, #1
 800210c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	333f      	adds	r3, #63	; 0x3f
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	333f      	adds	r3, #63	; 0x3f
 8002134:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002136:	2b02      	cmp	r3, #2
 8002138:	d121      	bne.n	800217e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	0151      	lsls	r1, r2, #5
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	440a      	add	r2, r1
 8002150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fe7c 	bl	8005e62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	2310      	movs	r3, #16
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e070      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	440b      	add	r3, r1
 800218c:	333f      	adds	r3, #63	; 0x3f
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b03      	cmp	r3, #3
 8002192:	d12a      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	0151      	lsls	r1, r2, #5
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	440a      	add	r2, r1
 80021aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	b2d8      	uxtb	r0, r3
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	335c      	adds	r3, #92	; 0x5c
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	4601      	mov	r1, r0
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f005 f940 	bl	8007468 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021e8:	e03a      	b.n	8002260 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	68fa      	ldr	r2, [r7, #12]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	440b      	add	r3, r1
 80021f8:	333f      	adds	r3, #63	; 0x3f
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d12f      	bne.n	8002260 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	335c      	adds	r3, #92	; 0x5c
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	440b      	add	r3, r1
 8002222:	3350      	adds	r3, #80	; 0x50
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2d8      	uxtb	r0, r3
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	440b      	add	r3, r1
 800223a:	3350      	adds	r3, #80	; 0x50
 800223c:	4602      	mov	r2, r0
 800223e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	b2d8      	uxtb	r0, r3
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	335c      	adds	r3, #92	; 0x5c
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	4601      	mov	r1, r0
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f005 f904 	bl	8007468 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	3350      	adds	r3, #80	; 0x50
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	f083 0301 	eor.w	r3, r3, #1
 8002276:	b2d8      	uxtb	r0, r3
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	440b      	add	r3, r1
 8002286:	3350      	adds	r3, #80	; 0x50
 8002288:	4602      	mov	r2, r0
 800228a:	701a      	strb	r2, [r3, #0]
}
 800228c:	e1f7      	b.n	800267e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	f040 811a 	bne.w	80024da <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	0151      	lsls	r1, r2, #5
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	440a      	add	r2, r1
 80022bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022c0:	f023 0302 	bic.w	r3, r3, #2
 80022c4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	440b      	add	r3, r1
 80022d4:	335d      	adds	r3, #93	; 0x5d
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d10a      	bne.n	80022f2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	440b      	add	r3, r1
 80022ea:	335c      	adds	r3, #92	; 0x5c
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e0d9      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	335d      	adds	r3, #93	; 0x5d
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10a      	bne.n	800231e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	335c      	adds	r3, #92	; 0x5c
 8002318:	2205      	movs	r2, #5
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e0c3      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	335d      	adds	r3, #93	; 0x5d
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b06      	cmp	r3, #6
 8002332:	d00a      	beq.n	800234a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	440b      	add	r3, r1
 8002342:	335d      	adds	r3, #93	; 0x5d
 8002344:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002346:	2b08      	cmp	r3, #8
 8002348:	d156      	bne.n	80023f8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3358      	adds	r3, #88	; 0x58
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	1c59      	adds	r1, r3, #1
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4403      	add	r3, r0
 800236c:	3358      	adds	r3, #88	; 0x58
 800236e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3358      	adds	r3, #88	; 0x58
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d914      	bls.n	80023b0 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	3358      	adds	r3, #88	; 0x58
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	440b      	add	r3, r1
 80023a8:	335c      	adds	r3, #92	; 0x5c
 80023aa:	2204      	movs	r2, #4
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e009      	b.n	80023c4 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	335c      	adds	r3, #92	; 0x5c
 80023c0:	2202      	movs	r2, #2
 80023c2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	015a      	lsls	r2, r3, #5
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023da:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023e2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	461a      	mov	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e056      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	4613      	mov	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	440b      	add	r3, r1
 8002406:	335d      	adds	r3, #93	; 0x5d
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d123      	bne.n	8002456 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	440b      	add	r3, r1
 800241c:	335c      	adds	r3, #92	; 0x5c
 800241e:	2202      	movs	r2, #2
 8002420:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	015a      	lsls	r2, r3, #5
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4413      	add	r3, r2
 800242a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002438:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002440:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4413      	add	r3, r2
 800244a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244e:	461a      	mov	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e027      	b.n	80024a6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	440b      	add	r3, r1
 8002464:	335d      	adds	r3, #93	; 0x5d
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b07      	cmp	r3, #7
 800246a:	d11c      	bne.n	80024a6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	3358      	adds	r3, #88	; 0x58
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1c59      	adds	r1, r3, #1
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4613      	mov	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4403      	add	r3, r0
 800248e:	3358      	adds	r3, #88	; 0x58
 8002490:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4613      	mov	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	440b      	add	r3, r1
 80024a0:	335c      	adds	r3, #92	; 0x5c
 80024a2:	2204      	movs	r2, #4
 80024a4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	461a      	mov	r2, r3
 80024b4:	2302      	movs	r3, #2
 80024b6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	b2d8      	uxtb	r0, r3
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	440b      	add	r3, r1
 80024ca:	335c      	adds	r3, #92	; 0x5c
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	4601      	mov	r1, r0
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f004 ffc8 	bl	8007468 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024d8:	e0d1      	b.n	800267e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	015a      	lsls	r2, r3, #5
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d13e      	bne.n	800256e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	440a      	add	r2, r1
 8002506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250a:	f043 0302 	orr.w	r3, r3, #2
 800250e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	440b      	add	r3, r1
 800251e:	3358      	adds	r3, #88	; 0x58
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4613      	mov	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4403      	add	r3, r0
 8002532:	3358      	adds	r3, #88	; 0x58
 8002534:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	335d      	adds	r3, #93	; 0x5d
 8002546:	2206      	movs	r2, #6
 8002548:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f003 fc84 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	461a      	mov	r2, r3
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	6093      	str	r3, [r2, #8]
}
 800256c:	e087      	b.n	800267e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	4413      	add	r3, r2
 8002576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b10      	cmp	r3, #16
 8002582:	d17c      	bne.n	800267e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	333f      	adds	r3, #63	; 0x3f
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d122      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	440b      	add	r3, r1
 80025a8:	3358      	adds	r3, #88	; 0x58
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fc42 	bl	8005e62 <USB_HC_Halt>
 80025de:	e045      	b.n	800266c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	440b      	add	r3, r1
 80025ee:	333f      	adds	r3, #63	; 0x3f
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	333f      	adds	r3, #63	; 0x3f
 8002606:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002608:	2b02      	cmp	r3, #2
 800260a:	d12f      	bne.n	800266c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	440b      	add	r3, r1
 800261a:	3358      	adds	r3, #88	; 0x58
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d121      	bne.n	800266c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	335d      	adds	r3, #93	; 0x5d
 8002638:	2203      	movs	r2, #3
 800263a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	015a      	lsls	r2, r3, #5
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4413      	add	r3, r2
 8002644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	0151      	lsls	r1, r2, #5
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	440a      	add	r2, r1
 8002652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002656:	f043 0302 	orr.w	r3, r3, #2
 800265a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fbfb 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015a      	lsls	r2, r3, #5
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4413      	add	r3, r2
 8002674:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002678:	461a      	mov	r2, r3
 800267a:	2310      	movs	r3, #16
 800267c:	6093      	str	r3, [r2, #8]
}
 800267e:	bf00      	nop
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b086      	sub	sp, #24
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d119      	bne.n	80026ea <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	2304      	movs	r3, #4
 80026c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	0151      	lsls	r1, r2, #5
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	440a      	add	r2, r1
 80026de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026e2:	f043 0302 	orr.w	r3, r3, #2
 80026e6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026e8:	e33e      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d141      	bne.n	8002784 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	2320      	movs	r3, #32
 8002710:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4613      	mov	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	440b      	add	r3, r1
 8002720:	333d      	adds	r3, #61	; 0x3d
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	f040 831f 	bne.w	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	333d      	adds	r3, #61	; 0x3d
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	440b      	add	r3, r1
 800274c:	335c      	adds	r3, #92	; 0x5c
 800274e:	2202      	movs	r2, #2
 8002750:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	0151      	lsls	r1, r2, #5
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	440a      	add	r2, r1
 8002768:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f003 fb70 	bl	8005e62 <USB_HC_Halt>
}
 8002782:	e2f1      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002796:	2b40      	cmp	r3, #64	; 0x40
 8002798:	d13f      	bne.n	800281a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	335d      	adds	r3, #93	; 0x5d
 80027aa:	2204      	movs	r2, #4
 80027ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	333d      	adds	r3, #61	; 0x3d
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	3358      	adds	r3, #88	; 0x58
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	015a      	lsls	r2, r3, #5
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	0151      	lsls	r1, r2, #5
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	440a      	add	r2, r1
 80027ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f003 fb2e 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	2340      	movs	r3, #64	; 0x40
 8002816:	6093      	str	r3, [r2, #8]
}
 8002818:	e2a6      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4413      	add	r3, r2
 8002822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002830:	d122      	bne.n	8002878 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	0151      	lsls	r1, r2, #5
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	440a      	add	r2, r1
 8002848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284c:	f043 0302 	orr.w	r3, r3, #2
 8002850:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fb00 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002874:	6093      	str	r3, [r2, #8]
}
 8002876:	e277      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b01      	cmp	r3, #1
 800288c:	d135      	bne.n	80028fa <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	3358      	adds	r3, #88	; 0x58
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	0151      	lsls	r1, r2, #5
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	440a      	add	r2, r1
 80028b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fac8 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028de:	461a      	mov	r2, r3
 80028e0:	2301      	movs	r3, #1
 80028e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	335d      	adds	r3, #93	; 0x5d
 80028f4:	2201      	movs	r2, #1
 80028f6:	701a      	strb	r2, [r3, #0]
}
 80028f8:	e236      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b08      	cmp	r3, #8
 800290e:	d12b      	bne.n	8002968 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2308      	movs	r3, #8
 8002920:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	0151      	lsls	r1, r2, #5
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	440a      	add	r2, r1
 8002938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f003 fa88 	bl	8005e62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	335d      	adds	r3, #93	; 0x5d
 8002962:	2205      	movs	r2, #5
 8002964:	701a      	strb	r2, [r3, #0]
}
 8002966:	e1ff      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b10      	cmp	r3, #16
 800297c:	d155      	bne.n	8002a2a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	3358      	adds	r3, #88	; 0x58
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	335d      	adds	r3, #93	; 0x5d
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	440b      	add	r3, r1
 80029b4:	333d      	adds	r3, #61	; 0x3d
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d114      	bne.n	80029e6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	333c      	adds	r3, #60	; 0x3c
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	333d      	adds	r3, #61	; 0x3d
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f003 fa26 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2310      	movs	r3, #16
 8002a26:	6093      	str	r3, [r2, #8]
}
 8002a28:	e19e      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d12b      	bne.n	8002a98 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 f9f9 	bl	8005e62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	335d      	adds	r3, #93	; 0x5d
 8002a80:	2206      	movs	r2, #6
 8002a82:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	461a      	mov	r2, r3
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	6093      	str	r3, [r2, #8]
}
 8002a96:	e167      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aae:	d135      	bne.n	8002b1c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002aca:	f043 0302 	orr.w	r3, r3, #2
 8002ace:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	b2d2      	uxtb	r2, r2
 8002ad8:	4611      	mov	r1, r2
 8002ada:	4618      	mov	r0, r3
 8002adc:	f003 f9c1 	bl	8005e62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	461a      	mov	r2, r3
 8002aee:	2310      	movs	r3, #16
 8002af0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	461a      	mov	r2, r3
 8002b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	440b      	add	r3, r1
 8002b14:	335d      	adds	r3, #93	; 0x5d
 8002b16:	2208      	movs	r2, #8
 8002b18:	701a      	strb	r2, [r3, #0]
}
 8002b1a:	e125      	b.n	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	f040 811a 	bne.w	8002d68 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	0151      	lsls	r1, r2, #5
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	440a      	add	r2, r1
 8002b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b4e:	f023 0302 	bic.w	r3, r3, #2
 8002b52:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	335d      	adds	r3, #93	; 0x5d
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d137      	bne.n	8002bda <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	335c      	adds	r3, #92	; 0x5c
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	333f      	adds	r3, #63	; 0x3f
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d00b      	beq.n	8002bac <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	333f      	adds	r3, #63	; 0x3f
 8002ba4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	f040 80c5 	bne.w	8002d36 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	3351      	adds	r3, #81	; 0x51
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3351      	adds	r3, #81	; 0x51
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	701a      	strb	r2, [r3, #0]
 8002bd8:	e0ad      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	440b      	add	r3, r1
 8002be8:	335d      	adds	r3, #93	; 0x5d
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d10a      	bne.n	8002c06 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	335c      	adds	r3, #92	; 0x5c
 8002c00:	2202      	movs	r2, #2
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e097      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	335d      	adds	r3, #93	; 0x5d
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d10a      	bne.n	8002c32 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335c      	adds	r3, #92	; 0x5c
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	e081      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	335d      	adds	r3, #93	; 0x5d
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d10a      	bne.n	8002c5e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	335c      	adds	r3, #92	; 0x5c
 8002c58:	2205      	movs	r2, #5
 8002c5a:	701a      	strb	r2, [r3, #0]
 8002c5c:	e06b      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	335d      	adds	r3, #93	; 0x5d
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b06      	cmp	r3, #6
 8002c72:	d00a      	beq.n	8002c8a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	335d      	adds	r3, #93	; 0x5d
 8002c84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d155      	bne.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3358      	adds	r3, #88	; 0x58
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	1c59      	adds	r1, r3, #1
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4403      	add	r3, r0
 8002cac:	3358      	adds	r3, #88	; 0x58
 8002cae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3358      	adds	r3, #88	; 0x58
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d914      	bls.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3358      	adds	r3, #88	; 0x58
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	440b      	add	r3, r1
 8002ce8:	335c      	adds	r3, #92	; 0x5c
 8002cea:	2204      	movs	r2, #4
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e009      	b.n	8002d04 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf0:	6879      	ldr	r1, [r7, #4]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	440b      	add	r3, r1
 8002cfe:	335c      	adds	r3, #92	; 0x5c
 8002d00:	2202      	movs	r2, #2
 8002d02:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d1a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d22:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	2302      	movs	r3, #2
 8002d46:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	b2d8      	uxtb	r0, r3
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4613      	mov	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	440b      	add	r3, r1
 8002d5a:	335c      	adds	r3, #92	; 0x5c
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4601      	mov	r1, r0
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f004 fb80 	bl	8007468 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	0c5b      	lsrs	r3, r3, #17
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d003      	beq.n	8002db4 <HCD_RXQLVL_IRQHandler+0x44>
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	f000 8082 	beq.w	8002eb6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002db2:	e083      	b.n	8002ebc <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d07f      	beq.n	8002eba <HCD_RXQLVL_IRQHandler+0x14a>
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	3344      	adds	r3, #68	; 0x44
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d074      	beq.n	8002eba <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3344      	adds	r3, #68	; 0x44
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	b292      	uxth	r2, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f002 fc19 	bl	8005622 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3344      	adds	r3, #68	; 0x44
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	18d1      	adds	r1, r2, r3
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4403      	add	r3, r0
 8002e14:	3344      	adds	r3, #68	; 0x44
 8002e16:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	334c      	adds	r3, #76	; 0x4c
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	18d1      	adds	r1, r2, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4403      	add	r3, r0
 8002e3c:	334c      	adds	r3, #76	; 0x4c
 8002e3e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d031      	beq.n	8002eba <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	015a      	lsls	r2, r3, #5
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e6c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e74:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	440b      	add	r3, r1
 8002e96:	3350      	adds	r3, #80	; 0x50
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	f083 0301 	eor.w	r3, r3, #1
 8002e9e:	b2d8      	uxtb	r0, r3
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	440b      	add	r3, r1
 8002eae:	3350      	adds	r3, #80	; 0x50
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	701a      	strb	r2, [r3, #0]
      break;
 8002eb4:	e001      	b.n	8002eba <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002eba:	bf00      	nop
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3728      	adds	r7, #40	; 0x28
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	1ff80000 	.word	0x1ff80000

08002ec8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ef4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d10b      	bne.n	8002f18 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f004 fa90 	bl	8007430 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d132      	bne.n	8002f88 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d126      	bne.n	8002f82 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d113      	bne.n	8002f64 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f46:	d106      	bne.n	8002f56 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fca2 	bl	8005898 <USB_InitFSLSPClkSel>
 8002f54:	e011      	b.n	8002f7a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f002 fc9b 	bl	8005898 <USB_InitFSLSPClkSel>
 8002f62:	e00a      	b.n	8002f7a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d106      	bne.n	8002f7a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f72:	461a      	mov	r2, r3
 8002f74:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f78:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f004 fa82 	bl	8007484 <HAL_HCD_PortEnabled_Callback>
 8002f80:	e002      	b.n	8002f88 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f004 fa8c 	bl	80074a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d103      	bne.n	8002f9a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f043 0320 	orr.w	r3, r3, #32
 8002f98:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	6013      	str	r3, [r2, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e11f      	b.n	8003202 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fd fdb2 	bl	8000b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f001 f9de 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_I2C_Init+0x25c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_I2C_Init+0x260>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_I2C_Init+0x264>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0db      	b.n	8003202 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a72      	ldr	r2, [pc, #456]	; (8003218 <HAL_I2C_Init+0x268>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a64      	ldr	r2, [pc, #400]	; (800320c <HAL_I2C_Init+0x25c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a63      	ldr	r2, [pc, #396]	; (800321c <HAL_I2C_Init+0x26c>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4956      	ldr	r1, [pc, #344]	; (800320c <HAL_I2C_Init+0x25c>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d80d      	bhi.n	80030d4 <HAL_I2C_Init+0x124>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	bf38      	it	cc
 80030d0:	2304      	movcc	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x150>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x176>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x17e>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1a4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e128      	b.n	8003484 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a90      	ldr	r2, [pc, #576]	; (800348c <HAL_I2S_Init+0x26c>)
 800324a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7fd fcbf 	bl	8000bd0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003268:	f023 030f 	bic.w	r3, r3, #15
 800326c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2202      	movs	r2, #2
 8003274:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d060      	beq.n	8003340 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d102      	bne.n	800328c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003286:	2310      	movs	r3, #16
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e001      	b.n	8003290 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800328c:	2320      	movs	r3, #32
 800328e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b20      	cmp	r3, #32
 8003296:	d802      	bhi.n	800329e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800329e:	2001      	movs	r0, #1
 80032a0:	f001 f98e 	bl	80045c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80032a4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032ae:	d125      	bne.n	80032fc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d010      	beq.n	80032da <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	461a      	mov	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d4:	3305      	adds	r3, #5
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e01f      	b.n	800331a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	3305      	adds	r3, #5
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e00e      	b.n	800331a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	461a      	mov	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	fbb2 f3f3 	udiv	r3, r2, r3
 8003316:	3305      	adds	r3, #5
 8003318:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4a5c      	ldr	r2, [pc, #368]	; (8003490 <HAL_I2S_Init+0x270>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	08db      	lsrs	r3, r3, #3
 8003324:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e003      	b.n	8003348 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003340:	2302      	movs	r3, #2
 8003342:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d902      	bls.n	8003354 <HAL_I2S_Init+0x134>
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2bff      	cmp	r3, #255	; 0xff
 8003352:	d907      	bls.n	8003364 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003358:	f043 0210 	orr.w	r2, r3, #16
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e08f      	b.n	8003484 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	ea42 0103 	orr.w	r1, r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	430a      	orrs	r2, r1
 8003376:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003382:	f023 030f 	bic.w	r3, r3, #15
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6851      	ldr	r1, [r2, #4]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6892      	ldr	r2, [r2, #8]
 800338e:	4311      	orrs	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	68d2      	ldr	r2, [r2, #12]
 8003394:	4311      	orrs	r1, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6992      	ldr	r2, [r2, #24]
 800339a:	430a      	orrs	r2, r1
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d161      	bne.n	8003474 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a38      	ldr	r2, [pc, #224]	; (8003494 <HAL_I2S_Init+0x274>)
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a37      	ldr	r2, [pc, #220]	; (8003498 <HAL_I2S_Init+0x278>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d101      	bne.n	80033c4 <HAL_I2S_Init+0x1a4>
 80033c0:	4b36      	ldr	r3, [pc, #216]	; (800349c <HAL_I2S_Init+0x27c>)
 80033c2:	e001      	b.n	80033c8 <HAL_I2S_Init+0x1a8>
 80033c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	4932      	ldr	r1, [pc, #200]	; (8003498 <HAL_I2S_Init+0x278>)
 80033d0:	428a      	cmp	r2, r1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2S_Init+0x1b8>
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_I2S_Init+0x27c>)
 80033d6:	e001      	b.n	80033dc <HAL_I2S_Init+0x1bc>
 80033d8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80033dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033e0:	f023 030f 	bic.w	r3, r3, #15
 80033e4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2b      	ldr	r2, [pc, #172]	; (8003498 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1d4>
 80033f0:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1d8>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	2202      	movs	r2, #2
 80033fa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a25      	ldr	r2, [pc, #148]	; (8003498 <HAL_I2S_Init+0x278>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d101      	bne.n	800340a <HAL_I2S_Init+0x1ea>
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_I2S_Init+0x27c>)
 8003408:	e001      	b.n	800340e <HAL_I2S_Init+0x1ee>
 800340a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341a:	d003      	beq.n	8003424 <HAL_I2S_Init+0x204>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	e001      	b.n	8003430 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	b299      	uxth	r1, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003446:	4303      	orrs	r3, r0
 8003448:	b29b      	uxth	r3, r3
 800344a:	430b      	orrs	r3, r1
 800344c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800344e:	4313      	orrs	r3, r2
 8003450:	b29a      	uxth	r2, r3
 8003452:	897b      	ldrh	r3, [r7, #10]
 8003454:	4313      	orrs	r3, r2
 8003456:	b29b      	uxth	r3, r3
 8003458:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800345c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <HAL_I2S_Init+0x278>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_I2S_Init+0x24c>
 8003468:	4b0c      	ldr	r3, [pc, #48]	; (800349c <HAL_I2S_Init+0x27c>)
 800346a:	e001      	b.n	8003470 <HAL_I2S_Init+0x250>
 800346c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003470:	897a      	ldrh	r2, [r7, #10]
 8003472:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	08003597 	.word	0x08003597
 8003490:	cccccccd 	.word	0xcccccccd
 8003494:	080036ad 	.word	0x080036ad
 8003498:	40003800 	.word	0x40003800
 800349c:	40003400 	.word	0x40003400

080034a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10e      	bne.n	8003530 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003520:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffb8 	bl	80034a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	b292      	uxth	r2, r2
 800354c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003552:	1c9a      	adds	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800355c:	b29b      	uxth	r3, r3
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10e      	bne.n	800358e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800357e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff ff93 	bl	80034b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800358e:	bf00      	nop
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b086      	sub	sp, #24
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d13a      	bne.n	8003628 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d109      	bne.n	80035d0 <I2S_IRQHandler+0x3a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b40      	cmp	r3, #64	; 0x40
 80035c8:	d102      	bne.n	80035d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ffb4 	bl	8003538 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d6:	2b40      	cmp	r3, #64	; 0x40
 80035d8:	d126      	bne.n	8003628 <I2S_IRQHandler+0x92>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d11f      	bne.n	8003628 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f043 0202 	orr.w	r2, r3, #2
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ff50 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b03      	cmp	r3, #3
 8003632:	d136      	bne.n	80036a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b02      	cmp	r3, #2
 800363c:	d109      	bne.n	8003652 <I2S_IRQHandler+0xbc>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003648:	2b80      	cmp	r3, #128	; 0x80
 800364a:	d102      	bne.n	8003652 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff45 	bl	80034dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b08      	cmp	r3, #8
 800365a:	d122      	bne.n	80036a2 <I2S_IRQHandler+0x10c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b20      	cmp	r3, #32
 8003668:	d11b      	bne.n	80036a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003678:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f043 0204 	orr.w	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff ff13 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b088      	sub	sp, #32
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4aa2      	ldr	r2, [pc, #648]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036c6:	4ba2      	ldr	r3, [pc, #648]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036c8:	e001      	b.n	80036ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a9b      	ldr	r2, [pc, #620]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80036e4:	4b9a      	ldr	r3, [pc, #616]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036e6:	e001      	b.n	80036ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80036e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f8:	d004      	beq.n	8003704 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f040 8099 	bne.w	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d107      	bne.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f925 	bl	8003968 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d107      	bne.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f9c8 	bl	8003ac8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d13a      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d035      	beq.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d101      	bne.n	800375a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003756:	4b7e      	ldr	r3, [pc, #504]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003758:	e001      	b.n	800375e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800375a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4979      	ldr	r1, [pc, #484]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003766:	428b      	cmp	r3, r1
 8003768:	d101      	bne.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800376a:	4b79      	ldr	r3, [pc, #484]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800376c:	e001      	b.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800376e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003772:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003776:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003786:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff fe88 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	f040 80be 	bne.w	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f000 80b8 	beq.w	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a59      	ldr	r2, [pc, #356]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d101      	bne.n	80037ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80037ea:	4b59      	ldr	r3, [pc, #356]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037ec:	e001      	b.n	80037f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80037ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4954      	ldr	r1, [pc, #336]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fa:	428b      	cmp	r3, r1
 80037fc:	d101      	bne.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80037fe:	4b54      	ldr	r3, [pc, #336]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003800:	e001      	b.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003806:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800380a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	60bb      	str	r3, [r7, #8]
 8003818:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f043 0204 	orr.w	r2, r3, #4
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff fe4a 	bl	80034c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003834:	e084      	b.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b02      	cmp	r3, #2
 800383e:	d107      	bne.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8be 	bl	80039cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d107      	bne.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f8fd 	bl	8003a64 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b40      	cmp	r3, #64	; 0x40
 8003872:	d12f      	bne.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d02a      	beq.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a2e      	ldr	r2, [pc, #184]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d101      	bne.n	800389c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003898:	4b2d      	ldr	r3, [pc, #180]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800389a:	e001      	b.n	80038a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800389c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4929      	ldr	r1, [pc, #164]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a8:	428b      	cmp	r3, r1
 80038aa:	d101      	bne.n	80038b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038ac:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038ae:	e001      	b.n	80038b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0202 	orr.w	r2, r3, #2
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fdfa 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d131      	bne.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f003 0320 	and.w	r3, r3, #32
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02c      	beq.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038f4:	e001      	b.n	80038fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80038f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4912      	ldr	r1, [pc, #72]	; (800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003902:	428b      	cmp	r3, r1
 8003904:	d101      	bne.n	800390a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003908:	e001      	b.n	800390e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800390a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003912:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003922:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f043 0204 	orr.w	r2, r3, #4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fdc5 	bl	80034c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800393e:	e000      	b.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003940:	bf00      	nop
}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40003800 	.word	0x40003800
 8003950:	40003400 	.word	0x40003400

08003954 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800395c:	bf00      	nop
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c99      	adds	r1, r3, #2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6251      	str	r1, [r2, #36]	; 0x24
 800397a:	881a      	ldrh	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffc9 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c99      	adds	r1, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6251      	str	r1, [r2, #36]	; 0x24
 80039de:	8819      	ldrh	r1, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1d      	ldr	r2, [pc, #116]	; (8003a5c <I2SEx_TxISR_I2SExt+0x90>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <I2SEx_TxISR_I2SExt+0x22>
 80039ea:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <I2SEx_TxISR_I2SExt+0x94>)
 80039ec:	e001      	b.n	80039f2 <I2SEx_TxISR_I2SExt+0x26>
 80039ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f2:	460a      	mov	r2, r1
 80039f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d121      	bne.n	8003a52 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <I2SEx_TxISR_I2SExt+0x90>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d101      	bne.n	8003a1c <I2SEx_TxISR_I2SExt+0x50>
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <I2SEx_TxISR_I2SExt+0x94>)
 8003a1a:	e001      	b.n	8003a20 <I2SEx_TxISR_I2SExt+0x54>
 8003a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	490d      	ldr	r1, [pc, #52]	; (8003a5c <I2SEx_TxISR_I2SExt+0x90>)
 8003a28:	428b      	cmp	r3, r1
 8003a2a:	d101      	bne.n	8003a30 <I2SEx_TxISR_I2SExt+0x64>
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <I2SEx_TxISR_I2SExt+0x94>)
 8003a2e:	e001      	b.n	8003a34 <I2SEx_TxISR_I2SExt+0x68>
 8003a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a34:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a38:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d106      	bne.n	8003a52 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f7ff ff81 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40003800 	.word	0x40003800
 8003a60:	40003400 	.word	0x40003400

08003a64 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68d8      	ldr	r0, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	1c99      	adds	r1, r3, #2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a7c:	b282      	uxth	r2, r0
 8003a7e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d113      	bne.n	8003ac0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff ff4a 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <I2SEx_RxISR_I2SExt+0x90>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <I2SEx_RxISR_I2SExt+0x16>
 8003ada:	4b20      	ldr	r3, [pc, #128]	; (8003b5c <I2SEx_RxISR_I2SExt+0x94>)
 8003adc:	e001      	b.n	8003ae2 <I2SEx_RxISR_I2SExt+0x1a>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae2:	68d8      	ldr	r0, [r3, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	1c99      	adds	r1, r3, #2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aee:	b282      	uxth	r2, r0
 8003af0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d121      	bne.n	8003b4e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <I2SEx_RxISR_I2SExt+0x90>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d101      	bne.n	8003b18 <I2SEx_RxISR_I2SExt+0x50>
 8003b14:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <I2SEx_RxISR_I2SExt+0x94>)
 8003b16:	e001      	b.n	8003b1c <I2SEx_RxISR_I2SExt+0x54>
 8003b18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	490d      	ldr	r1, [pc, #52]	; (8003b58 <I2SEx_RxISR_I2SExt+0x90>)
 8003b24:	428b      	cmp	r3, r1
 8003b26:	d101      	bne.n	8003b2c <I2SEx_RxISR_I2SExt+0x64>
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <I2SEx_RxISR_I2SExt+0x94>)
 8003b2a:	e001      	b.n	8003b30 <I2SEx_RxISR_I2SExt+0x68>
 8003b2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b34:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7ff ff03 	bl	8003954 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40003800 	.word	0x40003800
 8003b5c:	40003400 	.word	0x40003400

08003b60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e25b      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d075      	beq.n	8003c6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b7e:	4ba3      	ldr	r3, [pc, #652]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d00c      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b8a:	4ba0      	ldr	r3, [pc, #640]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d112      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b9d      	ldr	r3, [pc, #628]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d10b      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d05b      	beq.n	8003c68 <HAL_RCC_OscConfig+0x108>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d157      	bne.n	8003c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e236      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d106      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x74>
 8003bc6:	4b91      	ldr	r3, [pc, #580]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a90      	ldr	r2, [pc, #576]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e01d      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x98>
 8003bde:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a8a      	ldr	r2, [pc, #552]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a87      	ldr	r2, [pc, #540]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0xb0>
 8003bf8:	4b84      	ldr	r3, [pc, #528]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a83      	ldr	r2, [pc, #524]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b81      	ldr	r3, [pc, #516]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a80      	ldr	r2, [pc, #512]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fa02 	bl	8001020 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fd f9fe 	bl	8001020 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1fb      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c32:	4b76      	ldr	r3, [pc, #472]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0xc0>
 8003c3e:	e014      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd f9ee 	bl	8001020 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd f9ea 	bl	8001020 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e1e7      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c5a:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0xe8>
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d063      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c76:	4b65      	ldr	r3, [pc, #404]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00b      	beq.n	8003c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c82:	4b62      	ldr	r3, [pc, #392]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d11c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b5f      	ldr	r3, [pc, #380]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d116      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9a:	4b5c      	ldr	r3, [pc, #368]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x152>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e1bb      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb2:	4b56      	ldr	r3, [pc, #344]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4952      	ldr	r1, [pc, #328]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	e03a      	b.n	8003d3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d020      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fd f9a3 	bl	8001020 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cde:	f7fd f99f 	bl	8001020 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e19c      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf0:	4b46      	ldr	r3, [pc, #280]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f0      	beq.n	8003cde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b43      	ldr	r3, [pc, #268]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4940      	ldr	r1, [pc, #256]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
 8003d10:	e015      	b.n	8003d3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d12:	4b3f      	ldr	r3, [pc, #252]	; (8003e10 <HAL_RCC_OscConfig+0x2b0>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fd f982 	bl	8001020 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d20:	f7fd f97e 	bl	8001020 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e17b      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d32:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d030      	beq.n	8003dac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d016      	beq.n	8003d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_RCC_OscConfig+0x2b4>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d58:	f7fd f962 	bl	8001020 <HAL_GetTick>
 8003d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d60:	f7fd f95e 	bl	8001020 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e15b      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	4b26      	ldr	r3, [pc, #152]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x200>
 8003d7e:	e015      	b.n	8003dac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d80:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <HAL_RCC_OscConfig+0x2b4>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d86:	f7fd f94b 	bl	8001020 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fd f947 	bl	8001020 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e144      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b1a      	ldr	r3, [pc, #104]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f0      	bne.n	8003d8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80a0 	beq.w	8003efa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dbe:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10f      	bne.n	8003dea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	4b0f      	ldr	r3, [pc, #60]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8003dda:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de6:	2301      	movs	r3, #1
 8003de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x2b8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d121      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df6:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_RCC_OscConfig+0x2b8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_RCC_OscConfig+0x2b8>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e02:	f7fd f90d 	bl	8001020 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e08:	e011      	b.n	8003e2e <HAL_RCC_OscConfig+0x2ce>
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	42470000 	.word	0x42470000
 8003e14:	42470e80 	.word	0x42470e80
 8003e18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fd f900 	bl	8001020 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e0fd      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2e:	4b81      	ldr	r3, [pc, #516]	; (8004034 <HAL_RCC_OscConfig+0x4d4>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d106      	bne.n	8003e50 <HAL_RCC_OscConfig+0x2f0>
 8003e42:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e46:	4a7c      	ldr	r2, [pc, #496]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4e:	e01c      	b.n	8003e8a <HAL_RCC_OscConfig+0x32a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2b05      	cmp	r3, #5
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCC_OscConfig+0x312>
 8003e58:	4b77      	ldr	r3, [pc, #476]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a76      	ldr	r2, [pc, #472]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e5e:	f043 0304 	orr.w	r3, r3, #4
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
 8003e64:	4b74      	ldr	r3, [pc, #464]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a73      	ldr	r2, [pc, #460]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e70:	e00b      	b.n	8003e8a <HAL_RCC_OscConfig+0x32a>
 8003e72:	4b71      	ldr	r3, [pc, #452]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e76:	4a70      	ldr	r2, [pc, #448]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7e:	4b6e      	ldr	r3, [pc, #440]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a6d      	ldr	r2, [pc, #436]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fd f8c5 	bl	8001020 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fd f8c1 	bl	8001020 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e0bc      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb0:	4b61      	ldr	r3, [pc, #388]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ee      	beq.n	8003e9a <HAL_RCC_OscConfig+0x33a>
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebe:	f7fd f8af 	bl	8001020 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd f8ab 	bl	8001020 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e0a6      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003edc:	4b56      	ldr	r3, [pc, #344]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d105      	bne.n	8003efa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eee:	4b52      	ldr	r3, [pc, #328]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	4a51      	ldr	r2, [pc, #324]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8092 	beq.w	8004028 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f04:	4b4c      	ldr	r3, [pc, #304]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d05c      	beq.n	8003fca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d141      	bne.n	8003f9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f18:	4b48      	ldr	r3, [pc, #288]	; (800403c <HAL_RCC_OscConfig+0x4dc>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fd f87f 	bl	8001020 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f26:	f7fd f87b 	bl	8001020 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e078      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f38:	4b3f      	ldr	r3, [pc, #252]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	019b      	lsls	r3, r3, #6
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	061b      	lsls	r3, r3, #24
 8003f68:	4933      	ldr	r1, [pc, #204]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f6e:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCC_OscConfig+0x4dc>)
 8003f70:	2201      	movs	r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd f854 	bl	8001020 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd f850 	bl	8001020 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04d      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f0      	beq.n	8003f7c <HAL_RCC_OscConfig+0x41c>
 8003f9a:	e045      	b.n	8004028 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f9c:	4b27      	ldr	r3, [pc, #156]	; (800403c <HAL_RCC_OscConfig+0x4dc>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fd f83d 	bl	8001020 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003faa:	f7fd f839 	bl	8001020 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e036      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x44a>
 8003fc8:	e02e      	b.n	8004028 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e029      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fd6:	4b18      	ldr	r3, [pc, #96]	; (8004038 <HAL_RCC_OscConfig+0x4d8>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11c      	bne.n	8004024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d115      	bne.n	8004024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ffe:	4013      	ands	r3, r2
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004004:	4293      	cmp	r3, r2
 8004006:	d10d      	bne.n	8004024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d106      	bne.n	8004024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40007000 	.word	0x40007000
 8004038:	40023800 	.word	0x40023800
 800403c:	42470060 	.word	0x42470060

08004040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e0cc      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004054:	4b68      	ldr	r3, [pc, #416]	; (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d90c      	bls.n	800407c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b65      	ldr	r3, [pc, #404]	; (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b63      	ldr	r3, [pc, #396]	; (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0b8      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004094:	4b59      	ldr	r3, [pc, #356]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a58      	ldr	r2, [pc, #352]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800409e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ac:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	4a52      	ldr	r2, [pc, #328]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b8:	4b50      	ldr	r3, [pc, #320]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	494d      	ldr	r1, [pc, #308]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d044      	beq.n	8004160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d107      	bne.n	80040ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	4b47      	ldr	r3, [pc, #284]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d119      	bne.n	800411e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e07f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d003      	beq.n	80040fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d107      	bne.n	800410e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fe:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e06f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410e:	4b3b      	ldr	r3, [pc, #236]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e067      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f023 0203 	bic.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4934      	ldr	r1, [pc, #208]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004130:	f7fc ff76 	bl	8001020 <HAL_GetTick>
 8004134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	e00a      	b.n	800414e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004138:	f7fc ff72 	bl	8001020 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e04f      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	4b2b      	ldr	r3, [pc, #172]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 020c 	and.w	r2, r3, #12
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	429a      	cmp	r2, r3
 800415e:	d1eb      	bne.n	8004138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d20c      	bcs.n	8004188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b22      	ldr	r3, [pc, #136]	; (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	429a      	cmp	r2, r3
 8004182:	d001      	beq.n	8004188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e032      	b.n	80041ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4916      	ldr	r1, [pc, #88]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	490e      	ldr	r1, [pc, #56]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041c6:	f000 f821 	bl	800420c <HAL_RCC_GetSysClockFreq>
 80041ca:	4601      	mov	r1, r0
 80041cc:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	4a0a      	ldr	r2, [pc, #40]	; (8004200 <HAL_RCC_ClockConfig+0x1c0>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	fa21 f303 	lsr.w	r3, r1, r3
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc fed6 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	40023c00 	.word	0x40023c00
 80041fc:	40023800 	.word	0x40023800
 8004200:	08040e50 	.word	0x08040e50
 8004204:	20000000 	.word	0x20000000
 8004208:	20000004 	.word	0x20000004

0800420c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	2300      	movs	r3, #0
 800421c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004222:	4b63      	ldr	r3, [pc, #396]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d007      	beq.n	800423e <HAL_RCC_GetSysClockFreq+0x32>
 800422e:	2b08      	cmp	r3, #8
 8004230:	d008      	beq.n	8004244 <HAL_RCC_GetSysClockFreq+0x38>
 8004232:	2b00      	cmp	r3, #0
 8004234:	f040 80b4 	bne.w	80043a0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004238:	4b5e      	ldr	r3, [pc, #376]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800423a:	60bb      	str	r3, [r7, #8]
       break;
 800423c:	e0b3      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800423e:	4b5e      	ldr	r3, [pc, #376]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004240:	60bb      	str	r3, [r7, #8]
      break;
 8004242:	e0b0      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004244:	4b5a      	ldr	r3, [pc, #360]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800424c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424e:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04a      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800425a:	4b55      	ldr	r3, [pc, #340]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	099b      	lsrs	r3, r3, #6
 8004260:	f04f 0400 	mov.w	r4, #0
 8004264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	ea03 0501 	and.w	r5, r3, r1
 8004270:	ea04 0602 	and.w	r6, r4, r2
 8004274:	4629      	mov	r1, r5
 8004276:	4632      	mov	r2, r6
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	0154      	lsls	r4, r2, #5
 8004282:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004286:	014b      	lsls	r3, r1, #5
 8004288:	4619      	mov	r1, r3
 800428a:	4622      	mov	r2, r4
 800428c:	1b49      	subs	r1, r1, r5
 800428e:	eb62 0206 	sbc.w	r2, r2, r6
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	0194      	lsls	r4, r2, #6
 800429c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042a0:	018b      	lsls	r3, r1, #6
 80042a2:	1a5b      	subs	r3, r3, r1
 80042a4:	eb64 0402 	sbc.w	r4, r4, r2
 80042a8:	f04f 0100 	mov.w	r1, #0
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	00e2      	lsls	r2, r4, #3
 80042b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042b6:	00d9      	lsls	r1, r3, #3
 80042b8:	460b      	mov	r3, r1
 80042ba:	4614      	mov	r4, r2
 80042bc:	195b      	adds	r3, r3, r5
 80042be:	eb44 0406 	adc.w	r4, r4, r6
 80042c2:	f04f 0100 	mov.w	r1, #0
 80042c6:	f04f 0200 	mov.w	r2, #0
 80042ca:	0262      	lsls	r2, r4, #9
 80042cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80042d0:	0259      	lsls	r1, r3, #9
 80042d2:	460b      	mov	r3, r1
 80042d4:	4614      	mov	r4, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	4621      	mov	r1, r4
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	461a      	mov	r2, r3
 80042e2:	4623      	mov	r3, r4
 80042e4:	f7fb ff70 	bl	80001c8 <__aeabi_uldivmod>
 80042e8:	4603      	mov	r3, r0
 80042ea:	460c      	mov	r4, r1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e049      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f0:	4b2f      	ldr	r3, [pc, #188]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	f04f 0400 	mov.w	r4, #0
 80042fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	ea03 0501 	and.w	r5, r3, r1
 8004306:	ea04 0602 	and.w	r6, r4, r2
 800430a:	4629      	mov	r1, r5
 800430c:	4632      	mov	r2, r6
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	f04f 0400 	mov.w	r4, #0
 8004316:	0154      	lsls	r4, r2, #5
 8004318:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800431c:	014b      	lsls	r3, r1, #5
 800431e:	4619      	mov	r1, r3
 8004320:	4622      	mov	r2, r4
 8004322:	1b49      	subs	r1, r1, r5
 8004324:	eb62 0206 	sbc.w	r2, r2, r6
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	f04f 0400 	mov.w	r4, #0
 8004330:	0194      	lsls	r4, r2, #6
 8004332:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	1a5b      	subs	r3, r3, r1
 800433a:	eb64 0402 	sbc.w	r4, r4, r2
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	00e2      	lsls	r2, r4, #3
 8004348:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800434c:	00d9      	lsls	r1, r3, #3
 800434e:	460b      	mov	r3, r1
 8004350:	4614      	mov	r4, r2
 8004352:	195b      	adds	r3, r3, r5
 8004354:	eb44 0406 	adc.w	r4, r4, r6
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	02a2      	lsls	r2, r4, #10
 8004362:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004366:	0299      	lsls	r1, r3, #10
 8004368:	460b      	mov	r3, r1
 800436a:	4614      	mov	r4, r2
 800436c:	4618      	mov	r0, r3
 800436e:	4621      	mov	r1, r4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f04f 0400 	mov.w	r4, #0
 8004376:	461a      	mov	r2, r3
 8004378:	4623      	mov	r3, r4
 800437a:	f7fb ff25 	bl	80001c8 <__aeabi_uldivmod>
 800437e:	4603      	mov	r3, r0
 8004380:	460c      	mov	r4, r1
 8004382:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004384:	4b0a      	ldr	r3, [pc, #40]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	3301      	adds	r3, #1
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	60bb      	str	r3, [r7, #8]
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80043a2:	60bb      	str	r3, [r7, #8]
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	68bb      	ldr	r3, [r7, #8]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000000 	.word	0x20000000

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4601      	mov	r1, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4a03      	ldr	r2, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5cd3      	ldrb	r3, [r2, r3]
 80043ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08040e60 	.word	0x08040e60

080043fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004420:	2b00      	cmp	r3, #0
 8004422:	d035      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004424:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800442a:	f7fc fdf9 	bl	8001020 <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004432:	f7fc fdf5 	bl	8001020 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e0b0      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004444:	4b5b      	ldr	r3, [pc, #364]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	019a      	lsls	r2, r3, #6
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	071b      	lsls	r3, r3, #28
 800445c:	4955      	ldr	r1, [pc, #340]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004464:	4b52      	ldr	r3, [pc, #328]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800446a:	f7fc fdd9 	bl	8001020 <HAL_GetTick>
 800446e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004472:	f7fc fdd5 	bl	8001020 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e090      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 8083 	beq.w	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	4b44      	ldr	r3, [pc, #272]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4a43      	ldr	r2, [pc, #268]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ba:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3e      	ldr	r2, [pc, #248]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044c6:	f7fc fdab 	bl	8001020 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ce:	f7fc fda7 	bl	8001020 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e062      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044e0:	4b35      	ldr	r3, [pc, #212]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02f      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	429a      	cmp	r2, r3
 8004508:	d028      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800450a:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004514:	4b29      	ldr	r3, [pc, #164]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004516:	2201      	movs	r2, #1
 8004518:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800451a:	4b28      	ldr	r3, [pc, #160]	; (80045bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004520:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004526:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b01      	cmp	r3, #1
 8004530:	d114      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004532:	f7fc fd75 	bl	8001020 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004538:	e00a      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fc fd71 	bl	8001020 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	; 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e02a      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ee      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004568:	d10d      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800456a:	4b12      	ldr	r3, [pc, #72]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	490d      	ldr	r1, [pc, #52]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	4313      	orrs	r3, r2
 8004582:	608b      	str	r3, [r1, #8]
 8004584:	e005      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004590:	6093      	str	r3, [r2, #8]
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459e:	4905      	ldr	r1, [pc, #20]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	42470068 	.word	0x42470068
 80045b4:	40023800 	.word	0x40023800
 80045b8:	40007000 	.word	0x40007000
 80045bc:	42470e40 	.word	0x42470e40

080045c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d13d      	bne.n	800465a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80045de:	4b22      	ldr	r3, [pc, #136]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045e6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d12f      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80045f4:	617b      	str	r3, [r7, #20]
          break;
 80045f6:	e02f      	b.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004604:	d108      	bne.n	8004618 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004606:	4b18      	ldr	r3, [pc, #96]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	e007      	b.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004618:	4b13      	ldr	r3, [pc, #76]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004620:	4a14      	ldr	r2, [pc, #80]	; (8004674 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004622:	fbb2 f3f3 	udiv	r3, r2, r3
 8004626:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004628:	4b0f      	ldr	r3, [pc, #60]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800462a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
 800463a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800463c:	4b0a      	ldr	r3, [pc, #40]	; (8004668 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800463e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004642:	0f1b      	lsrs	r3, r3, #28
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
 800464e:	617b      	str	r3, [r7, #20]
          break;
 8004650:	e002      	b.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
          break;
 8004656:	bf00      	nop
        }
      }
      break;
 8004658:	bf00      	nop
    }
  }
  return frequency;
 800465a:	697b      	ldr	r3, [r7, #20]
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40023800 	.word	0x40023800
 800466c:	00bb8000 	.word	0x00bb8000
 8004670:	007a1200 	.word	0x007a1200
 8004674:	00f42400 	.word	0x00f42400

08004678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e056      	b.n	8004738 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d106      	bne.n	80046aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7fc fafb 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	ea42 0103 	orr.w	r1, r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	0c1b      	lsrs	r3, r3, #16
 8004708:	f003 0104 	and.w	r1, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	69da      	ldr	r2, [r3, #28]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004726:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e01d      	b.n	800478e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fae2 	bl	8000d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f000 fb1e 	bl	8004dc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d841      	bhi.n	800482c <HAL_TIM_PWM_Start_IT+0x94>
 80047a8:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <HAL_TIM_PWM_Start_IT+0x18>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047e5 	.word	0x080047e5
 80047b4:	0800482d 	.word	0x0800482d
 80047b8:	0800482d 	.word	0x0800482d
 80047bc:	0800482d 	.word	0x0800482d
 80047c0:	080047f7 	.word	0x080047f7
 80047c4:	0800482d 	.word	0x0800482d
 80047c8:	0800482d 	.word	0x0800482d
 80047cc:	0800482d 	.word	0x0800482d
 80047d0:	08004809 	.word	0x08004809
 80047d4:	0800482d 	.word	0x0800482d
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	0800482d 	.word	0x0800482d
 80047e0:	0800481b 	.word	0x0800481b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0202 	orr.w	r2, r2, #2
 80047f2:	60da      	str	r2, [r3, #12]
      break;
 80047f4:	e01b      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0204 	orr.w	r2, r2, #4
 8004804:	60da      	str	r2, [r3, #12]
      break;
 8004806:	e012      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0208 	orr.w	r2, r2, #8
 8004816:	60da      	str	r2, [r3, #12]
      break;
 8004818:	e009      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0210 	orr.w	r2, r2, #16
 8004828:	60da      	str	r2, [r3, #12]
      break;
 800482a:	e000      	b.n	800482e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800482c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2201      	movs	r2, #1
 8004834:	6839      	ldr	r1, [r7, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fd12 	bl	8005260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a15      	ldr	r2, [pc, #84]	; (8004898 <HAL_TIM_PWM_Start_IT+0x100>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d004      	beq.n	8004850 <HAL_TIM_PWM_Start_IT+0xb8>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a14      	ldr	r2, [pc, #80]	; (800489c <HAL_TIM_PWM_Start_IT+0x104>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <HAL_TIM_PWM_Start_IT+0xbc>
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <HAL_TIM_PWM_Start_IT+0xbe>
 8004854:	2300      	movs	r3, #0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d007      	beq.n	800488c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40010000 	.word	0x40010000
 800489c:	40010400 	.word	0x40010400

080048a0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b0c      	cmp	r3, #12
 80048ae:	d841      	bhi.n	8004934 <HAL_TIM_PWM_Stop_IT+0x94>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <HAL_TIM_PWM_Stop_IT+0x18>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048ed 	.word	0x080048ed
 80048bc:	08004935 	.word	0x08004935
 80048c0:	08004935 	.word	0x08004935
 80048c4:	08004935 	.word	0x08004935
 80048c8:	080048ff 	.word	0x080048ff
 80048cc:	08004935 	.word	0x08004935
 80048d0:	08004935 	.word	0x08004935
 80048d4:	08004935 	.word	0x08004935
 80048d8:	08004911 	.word	0x08004911
 80048dc:	08004935 	.word	0x08004935
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004935 	.word	0x08004935
 80048e8:	08004923 	.word	0x08004923
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0202 	bic.w	r2, r2, #2
 80048fa:	60da      	str	r2, [r3, #12]
      break;
 80048fc:	e01b      	b.n	8004936 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 0204 	bic.w	r2, r2, #4
 800490c:	60da      	str	r2, [r3, #12]
      break;
 800490e:	e012      	b.n	8004936 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0208 	bic.w	r2, r2, #8
 800491e:	60da      	str	r2, [r3, #12]
      break;
 8004920:	e009      	b.n	8004936 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0210 	bic.w	r2, r2, #16
 8004930:	60da      	str	r2, [r3, #12]
      break;
 8004932:	e000      	b.n	8004936 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8004934:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fc8e 	bl	8005260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a20      	ldr	r2, [pc, #128]	; (80049cc <HAL_TIM_PWM_Stop_IT+0x12c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIM_PWM_Stop_IT+0xb8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_TIM_PWM_Stop_IT+0x130>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_TIM_PWM_Stop_IT+0xbc>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <HAL_TIM_PWM_Stop_IT+0xbe>
 800495c:	2300      	movs	r3, #0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d017      	beq.n	8004992 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6a1a      	ldr	r2, [r3, #32]
 8004968:	f241 1311 	movw	r3, #4369	; 0x1111
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <HAL_TIM_PWM_Stop_IT+0xf2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1a      	ldr	r2, [r3, #32]
 8004978:	f240 4344 	movw	r3, #1092	; 0x444
 800497c:	4013      	ands	r3, r2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d107      	bne.n	8004992 <HAL_TIM_PWM_Stop_IT+0xf2>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004990:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6a1a      	ldr	r2, [r3, #32]
 8004998:	f241 1311 	movw	r3, #4369	; 0x1111
 800499c:	4013      	ands	r3, r2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_TIM_PWM_Stop_IT+0x122>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1a      	ldr	r2, [r3, #32]
 80049a8:	f240 4344 	movw	r3, #1092	; 0x444
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d107      	bne.n	80049c2 <HAL_TIM_PWM_Stop_IT+0x122>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40010000 	.word	0x40010000
 80049d0:	40010400 	.word	0x40010400

080049d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d122      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d11b      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f06f 0202 	mvn.w	r2, #2
 8004a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9be 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004a1c:	e005      	b.n	8004a2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9b0 	bl	8004d84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fb ffd7 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d122      	bne.n	8004a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d11b      	bne.n	8004a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0204 	mvn.w	r2, #4
 8004a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f994 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004a70:	e005      	b.n	8004a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f986 	bl	8004d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7fb ffad 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b08      	cmp	r3, #8
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0208 	mvn.w	r2, #8
 8004aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2204      	movs	r2, #4
 8004aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f96a 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f95c 	bl	8004d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fb ff83 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0210 	mvn.w	r2, #16
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2208      	movs	r2, #8
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f940 	bl	8004d98 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f932 	bl	8004d84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7fb ff59 	bl	80009d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d10e      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0201 	mvn.w	r2, #1
 8004b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f90c 	bl	8004d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b70:	2b80      	cmp	r3, #128	; 0x80
 8004b72:	d107      	bne.n	8004b84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fc1a 	bl	80053b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d10e      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d107      	bne.n	8004bb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f8fe 	bl	8004dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0320 	and.w	r3, r3, #32
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d10e      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b20      	cmp	r3, #32
 8004bca:	d107      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0220 	mvn.w	r2, #32
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fbe4 	bl	80053a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e0b4      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	f200 809f 	bhi.w	8004d54 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004d55 	.word	0x08004d55
 8004c24:	08004d55 	.word	0x08004d55
 8004c28:	08004d55 	.word	0x08004d55
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004d55 	.word	0x08004d55
 8004c34:	08004d55 	.word	0x08004d55
 8004c38:	08004d55 	.word	0x08004d55
 8004c3c:	08004cd3 	.word	0x08004cd3
 8004c40:	08004d55 	.word	0x08004d55
 8004c44:	08004d55 	.word	0x08004d55
 8004c48:	08004d55 	.word	0x08004d55
 8004c4c:	08004d13 	.word	0x08004d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f952 	bl	8004f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0208 	orr.w	r2, r2, #8
 8004c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0204 	bic.w	r2, r2, #4
 8004c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6999      	ldr	r1, [r3, #24]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	619a      	str	r2, [r3, #24]
      break;
 8004c8e:	e062      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f9a2 	bl	8004fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
      break;
 8004cd0:	e041      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f9f7 	bl	80050cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0208 	orr.w	r2, r2, #8
 8004cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0204 	bic.w	r2, r2, #4
 8004cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69d9      	ldr	r1, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	61da      	str	r2, [r3, #28]
      break;
 8004d10:	e021      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fa4b 	bl	80051b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	021a      	lsls	r2, r3, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	61da      	str	r2, [r3, #28]
      break;
 8004d52:	e000      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004d54:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a40      	ldr	r2, [pc, #256]	; (8004ed4 <TIM_Base_SetConfig+0x114>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d00f      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3d      	ldr	r2, [pc, #244]	; (8004ed8 <TIM_Base_SetConfig+0x118>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00b      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3c      	ldr	r2, [pc, #240]	; (8004edc <TIM_Base_SetConfig+0x11c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d007      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a3b      	ldr	r2, [pc, #236]	; (8004ee0 <TIM_Base_SetConfig+0x120>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d003      	beq.n	8004e00 <TIM_Base_SetConfig+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a3a      	ldr	r2, [pc, #232]	; (8004ee4 <TIM_Base_SetConfig+0x124>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d108      	bne.n	8004e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2f      	ldr	r2, [pc, #188]	; (8004ed4 <TIM_Base_SetConfig+0x114>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d02b      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d027      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2c      	ldr	r2, [pc, #176]	; (8004ed8 <TIM_Base_SetConfig+0x118>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d023      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2b      	ldr	r2, [pc, #172]	; (8004edc <TIM_Base_SetConfig+0x11c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01f      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2a      	ldr	r2, [pc, #168]	; (8004ee0 <TIM_Base_SetConfig+0x120>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d01b      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a29      	ldr	r2, [pc, #164]	; (8004ee4 <TIM_Base_SetConfig+0x124>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d017      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a28      	ldr	r2, [pc, #160]	; (8004ee8 <TIM_Base_SetConfig+0x128>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a27      	ldr	r2, [pc, #156]	; (8004eec <TIM_Base_SetConfig+0x12c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00f      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a26      	ldr	r2, [pc, #152]	; (8004ef0 <TIM_Base_SetConfig+0x130>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00b      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <TIM_Base_SetConfig+0x134>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d007      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <TIM_Base_SetConfig+0x138>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d003      	beq.n	8004e72 <TIM_Base_SetConfig+0xb2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a23      	ldr	r2, [pc, #140]	; (8004efc <TIM_Base_SetConfig+0x13c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d108      	bne.n	8004e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a0a      	ldr	r2, [pc, #40]	; (8004ed4 <TIM_Base_SetConfig+0x114>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d003      	beq.n	8004eb8 <TIM_Base_SetConfig+0xf8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a0c      	ldr	r2, [pc, #48]	; (8004ee4 <TIM_Base_SetConfig+0x124>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d103      	bne.n	8004ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	615a      	str	r2, [r3, #20]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40010000 	.word	0x40010000
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40000c00 	.word	0x40000c00
 8004ee4:	40010400 	.word	0x40010400
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800
 8004ef4:	40001800 	.word	0x40001800
 8004ef8:	40001c00 	.word	0x40001c00
 8004efc:	40002000 	.word	0x40002000

08004f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f023 0302 	bic.w	r3, r3, #2
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a20      	ldr	r2, [pc, #128]	; (8004fd8 <TIM_OC1_SetConfig+0xd8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_OC1_SetConfig+0x64>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a1f      	ldr	r2, [pc, #124]	; (8004fdc <TIM_OC1_SetConfig+0xdc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10c      	bne.n	8004f7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f023 0308 	bic.w	r3, r3, #8
 8004f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	697a      	ldr	r2, [r7, #20]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f023 0304 	bic.w	r3, r3, #4
 8004f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a15      	ldr	r2, [pc, #84]	; (8004fd8 <TIM_OC1_SetConfig+0xd8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_OC1_SetConfig+0x8e>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a14      	ldr	r2, [pc, #80]	; (8004fdc <TIM_OC1_SetConfig+0xdc>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d111      	bne.n	8004fb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	621a      	str	r2, [r3, #32]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	40010000 	.word	0x40010000
 8004fdc:	40010400 	.word	0x40010400

08004fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	f023 0210 	bic.w	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0320 	bic.w	r3, r3, #32
 800502a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <TIM_OC2_SetConfig+0xe4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d003      	beq.n	8005048 <TIM_OC2_SetConfig+0x68>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <TIM_OC2_SetConfig+0xe8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d10d      	bne.n	8005064 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800504e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	4313      	orrs	r3, r2
 800505a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a17      	ldr	r2, [pc, #92]	; (80050c4 <TIM_OC2_SetConfig+0xe4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC2_SetConfig+0x94>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a16      	ldr	r2, [pc, #88]	; (80050c8 <TIM_OC2_SetConfig+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d113      	bne.n	800509c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800507a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	bf00      	nop
 80050b8:	371c      	adds	r7, #28
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010000 	.word	0x40010000
 80050c8:	40010400 	.word	0x40010400

080050cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	4313      	orrs	r3, r2
 8005120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a21      	ldr	r2, [pc, #132]	; (80051ac <TIM_OC3_SetConfig+0xe0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_OC3_SetConfig+0x66>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a20      	ldr	r2, [pc, #128]	; (80051b0 <TIM_OC3_SetConfig+0xe4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d10d      	bne.n	800514e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800514c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a16      	ldr	r2, [pc, #88]	; (80051ac <TIM_OC3_SetConfig+0xe0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_OC3_SetConfig+0x92>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <TIM_OC3_SetConfig+0xe4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d113      	bne.n	8005186 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40010400 	.word	0x40010400

080051b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	021b      	lsls	r3, r3, #8
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	031b      	lsls	r3, r3, #12
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a12      	ldr	r2, [pc, #72]	; (8005258 <TIM_OC4_SetConfig+0xa4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d003      	beq.n	800521c <TIM_OC4_SetConfig+0x68>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a11      	ldr	r2, [pc, #68]	; (800525c <TIM_OC4_SetConfig+0xa8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d109      	bne.n	8005230 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40010400 	.word	0x40010400

08005260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2201      	movs	r2, #1
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e05a      	b.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a21      	ldr	r2, [pc, #132]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d01d      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1d      	ldr	r2, [pc, #116]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1b      	ldr	r2, [pc, #108]	; (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1a      	ldr	r2, [pc, #104]	; (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	; (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a15      	ldr	r2, [pc, #84]	; (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10c      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4313      	orrs	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40010400 	.word	0x40010400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40001800 	.word	0x40001800

080053a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053cc:	b084      	sub	sp, #16
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b084      	sub	sp, #16
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	f107 001c 	add.w	r0, r7, #28
 80053da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d122      	bne.n	800542a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80053f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800540c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d105      	bne.n	800541e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f94a 	bl	80056b8 <USB_CoreReset>
 8005424:	4603      	mov	r3, r0
 8005426:	73fb      	strb	r3, [r7, #15]
 8005428:	e01a      	b.n	8005460 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f93e 	bl	80056b8 <USB_CoreReset>
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	639a      	str	r2, [r3, #56]	; 0x38
 8005452:	e005      	b.n	8005460 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	2b01      	cmp	r3, #1
 8005464:	d10b      	bne.n	800547e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f043 0206 	orr.w	r2, r3, #6
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800548a:	b004      	add	sp, #16
 800548c:	4770      	bx	lr

0800548e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f043 0201 	orr.w	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f023 0201 	bic.w	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b082      	sub	sp, #8
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	460b      	mov	r3, r1
 80054dc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d106      	bne.n	80054fe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	60da      	str	r2, [r3, #12]
 80054fc:	e00b      	b.n	8005516 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	60da      	str	r2, [r3, #12]
 8005510:	e001      	b.n	8005516 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e003      	b.n	800551e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005516:	2032      	movs	r0, #50	; 0x32
 8005518:	f7fb fd8e 	bl	8001038 <HAL_Delay>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	019b      	lsls	r3, r3, #6
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a09      	ldr	r2, [pc, #36]	; (8005570 <USB_FlushTxFifo+0x48>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e006      	b.n	8005562 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d0f0      	beq.n	8005542 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	00030d40 	.word	0x00030d40

08005574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2210      	movs	r2, #16
 8005584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <USB_FlushRxFifo+0x40>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d901      	bls.n	8005598 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d0f0      	beq.n	8005586 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b089      	sub	sp, #36	; 0x24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	4611      	mov	r1, r2
 80055c4:	461a      	mov	r2, r3
 80055c6:	460b      	mov	r3, r1
 80055c8:	71fb      	strb	r3, [r7, #7]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80055d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d11a      	bne.n	8005614 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80055de:	88bb      	ldrh	r3, [r7, #4]
 80055e0:	3303      	adds	r3, #3
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	61bb      	str	r3, [r7, #24]
 80055ea:	e00f      	b.n	800560c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	031a      	lsls	r2, r3, #12
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055f8:	461a      	mov	r2, r3
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	3304      	adds	r3, #4
 8005604:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	3301      	adds	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	429a      	cmp	r2, r3
 8005612:	d3eb      	bcc.n	80055ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3724      	adds	r7, #36	; 0x24
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005622:	b480      	push	{r7}
 8005624:	b089      	sub	sp, #36	; 0x24
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	4613      	mov	r3, r2
 800562e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005638:	88fb      	ldrh	r3, [r7, #6]
 800563a:	3303      	adds	r3, #3
 800563c:	089b      	lsrs	r3, r3, #2
 800563e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005640:	2300      	movs	r3, #0
 8005642:	61bb      	str	r3, [r7, #24]
 8005644:	e00b      	b.n	800565e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	601a      	str	r2, [r3, #0]
    pDest++;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3304      	adds	r3, #4
 8005656:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	3301      	adds	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	429a      	cmp	r2, r3
 8005664:	d3ef      	bcc.n	8005646 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005666:	69fb      	ldr	r3, [r7, #28]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3724      	adds	r7, #36	; 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800568c:	68fb      	ldr	r3, [r7, #12]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0301 	and.w	r3, r3, #1
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4a13      	ldr	r2, [pc, #76]	; (800571c <USB_CoreReset+0x64>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e01b      	b.n	800570e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	daf2      	bge.n	80056c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f043 0201 	orr.w	r2, r3, #1
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <USB_CoreReset+0x64>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d901      	bls.n	8005700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e006      	b.n	800570e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b01      	cmp	r3, #1
 800570a:	d0f0      	beq.n	80056ee <USB_CoreReset+0x36>

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	00030d40 	.word	0x00030d40

08005720 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005720:	b084      	sub	sp, #16
 8005722:	b580      	push	{r7, lr}
 8005724:	b084      	sub	sp, #16
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	f107 001c 	add.w	r0, r7, #28
 800572e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800573c:	461a      	mov	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d018      	beq.n	80057a4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	2b01      	cmp	r3, #1
 8005776:	d10a      	bne.n	800578e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005786:	f043 0304 	orr.w	r3, r3, #4
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	e014      	b.n	80057b8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e009      	b.n	80057b8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057b2:	f023 0304 	bic.w	r3, r3, #4
 80057b6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80057b8:	2110      	movs	r1, #16
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff feb4 	bl	8005528 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fed7 	bl	8005574 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e015      	b.n	80057f8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	015a      	lsls	r2, r3, #5
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4413      	add	r3, r2
 80057d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d8:	461a      	mov	r2, r3
 80057da:	f04f 33ff 	mov.w	r3, #4294967295
 80057de:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ec:	461a      	mov	r2, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d3e5      	bcc.n	80057cc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005800:	2101      	movs	r1, #1
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f882 	bl	800590c <USB_DriveVbus>

  HAL_Delay(200U);
 8005808:	20c8      	movs	r0, #200	; 0xc8
 800580a:	f7fb fc15 	bl	8001038 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f04f 32ff 	mov.w	r2, #4294967295
 800581a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00b      	beq.n	8005840 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a14      	ldr	r2, [pc, #80]	; (8005884 <USB_HostInit+0x164>)
 8005834:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <USB_HostInit+0x168>)
 800583a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800583e:	e009      	b.n	8005854 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a10      	ldr	r2, [pc, #64]	; (800588c <USB_HostInit+0x16c>)
 800584a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <USB_HostInit+0x170>)
 8005850:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f043 0210 	orr.w	r2, r3, #16
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	4b0a      	ldr	r3, [pc, #40]	; (8005894 <USB_HostInit+0x174>)
 800586c:	4313      	orrs	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587e:	b004      	add	sp, #16
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	01000200 	.word	0x01000200
 8005888:	00e00300 	.word	0x00e00300
 800588c:	00600080 	.word	0x00600080
 8005890:	004000e0 	.word	0x004000e0
 8005894:	a3200008 	.word	0xa3200008

08005898 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	68f9      	ldr	r1, [r7, #12]
 80058cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d107      	bne.n	80058ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058e0:	461a      	mov	r2, r3
 80058e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80058e6:	6053      	str	r3, [r2, #4]
 80058e8:	e009      	b.n	80058fe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80058ea:	78fb      	ldrb	r3, [r7, #3]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d106      	bne.n	80058fe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058f6:	461a      	mov	r2, r3
 80058f8:	f241 7370 	movw	r3, #6000	; 0x1770
 80058fc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3714      	adds	r7, #20
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005930:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <USB_DriveVbus+0x44>
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d106      	bne.n	8005950 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800594a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800594e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595a:	d109      	bne.n	8005970 <USB_DriveVbus+0x64>
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800596a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	b29b      	uxth	r3, r3
}
 8005994:	4618      	mov	r0, r3
 8005996:	3714      	adds	r7, #20
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	461a      	mov	r2, r3
 80059ae:	4603      	mov	r3, r0
 80059b0:	70fb      	strb	r3, [r7, #3]
 80059b2:	460b      	mov	r3, r1
 80059b4:	70bb      	strb	r3, [r7, #2]
 80059b6:	4613      	mov	r3, r2
 80059b8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80059c2:	78fb      	ldrb	r3, [r7, #3]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	461a      	mov	r2, r3
 80059d0:	f04f 33ff 	mov.w	r3, #4294967295
 80059d4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80059d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d87e      	bhi.n	8005adc <USB_HC_Init+0x13c>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <USB_HC_Init+0x44>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a9f 	.word	0x08005a9f
 80059ec:	080059f5 	.word	0x080059f5
 80059f0:	08005a61 	.word	0x08005a61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80059f4:	78fb      	ldrb	r3, [r7, #3]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	461a      	mov	r2, r3
 8005a02:	f240 439d 	movw	r3, #1181	; 0x49d
 8005a06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	da10      	bge.n	8005a32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	78fa      	ldrb	r2, [r7, #3]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a2e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005a30:	e057      	b.n	8005ae2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d051      	beq.n	8005ae2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	78fa      	ldrb	r2, [r7, #3]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005a5c:	60d3      	str	r3, [r2, #12]
      break;
 8005a5e:	e040      	b.n	8005ae2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	015a      	lsls	r2, r3, #5
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4413      	add	r3, r2
 8005a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005a72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005a74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	da34      	bge.n	8005ae6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	78fa      	ldrb	r2, [r7, #3]
 8005a8c:	0151      	lsls	r1, r2, #5
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	440a      	add	r2, r1
 8005a92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005a9c:	e023      	b.n	8005ae6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f240 2325 	movw	r3, #549	; 0x225
 8005ab0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005ab2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da17      	bge.n	8005aea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	78fa      	ldrb	r2, [r7, #3]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ad4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005ad8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ada:	e006      	b.n	8005aea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	e004      	b.n	8005aec <USB_HC_Init+0x14c>
      break;
 8005ae2:	bf00      	nop
 8005ae4:	e002      	b.n	8005aec <USB_HC_Init+0x14c>
      break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <USB_HC_Init+0x14c>
      break;
 8005aea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	78fb      	ldrb	r3, [r7, #3]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	2101      	movs	r1, #1
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b06:	4313      	orrs	r3, r2
 8005b08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	da03      	bge.n	8005b26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	e001      	b.n	8005b2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d103      	bne.n	8005b3a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005b32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e001      	b.n	8005b3e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b3e:	787b      	ldrb	r3, [r7, #1]
 8005b40:	059b      	lsls	r3, r3, #22
 8005b42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b46:	78bb      	ldrb	r3, [r7, #2]
 8005b48:	02db      	lsls	r3, r3, #11
 8005b4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b54:	049b      	lsls	r3, r3, #18
 8005b56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005b5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005b62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	0159      	lsls	r1, r3, #5
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	440b      	add	r3, r1
 8005b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b74:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005b7a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	d10f      	bne.n	8005ba4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005b84:	78fb      	ldrb	r3, [r7, #3]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	78fa      	ldrb	r2, [r7, #3]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ba2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	371c      	adds	r7, #28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop

08005bb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	; 0x30
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bd0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d028      	beq.n	8005c30 <USB_HC_StartXfer+0x7c>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d124      	bne.n	8005c30 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10b      	bne.n	8005c04 <USB_HC_StartXfer+0x50>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	795b      	ldrb	r3, [r3, #5]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 fa30 	bl	8006060 <USB_DoPing>
      return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e114      	b.n	8005e2e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d112      	bne.n	8005c30 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	0151      	lsls	r1, r2, #5
 8005c1c:	6a3a      	ldr	r2, [r7, #32]
 8005c1e:	440a      	add	r2, r1
 8005c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005c28:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d018      	beq.n	8005c6a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	8912      	ldrh	r2, [r2, #8]
 8005c40:	4413      	add	r3, r2
 8005c42:	3b01      	subs	r3, #1
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	8912      	ldrh	r2, [r2, #8]
 8005c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c4c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005c4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c50:	8b7b      	ldrh	r3, [r7, #26]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90b      	bls.n	8005c6e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005c56:	8b7b      	ldrh	r3, [r7, #26]
 8005c58:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005c5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	8912      	ldrh	r2, [r2, #8]
 8005c60:	fb02 f203 	mul.w	r2, r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	611a      	str	r2, [r3, #16]
 8005c68:	e001      	b.n	8005c6e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	78db      	ldrb	r3, [r3, #3]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d006      	beq.n	8005c84 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005c76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	8912      	ldrh	r2, [r2, #8]
 8005c7c:	fb02 f203 	mul.w	r2, r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c8e:	04d9      	lsls	r1, r3, #19
 8005c90:	4b69      	ldr	r3, [pc, #420]	; (8005e38 <USB_HC_StartXfer+0x284>)
 8005c92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005c94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	7a9b      	ldrb	r3, [r3, #10]
 8005c9a:	075b      	lsls	r3, r3, #29
 8005c9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ca0:	69f9      	ldr	r1, [r7, #28]
 8005ca2:	0148      	lsls	r0, r1, #5
 8005ca4:	6a39      	ldr	r1, [r7, #32]
 8005ca6:	4401      	add	r1, r0
 8005ca8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005cac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005cae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	68d9      	ldr	r1, [r3, #12]
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc6:	460a      	mov	r2, r1
 8005cc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf0c      	ite	eq
 8005cda:	2301      	moveq	r3, #1
 8005cdc:	2300      	movne	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	0151      	lsls	r1, r2, #5
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	440a      	add	r2, r1
 8005cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	7e7b      	ldrb	r3, [r7, #25]
 8005d12:	075b      	lsls	r3, r3, #29
 8005d14:	69f9      	ldr	r1, [r7, #28]
 8005d16:	0148      	lsls	r0, r1, #5
 8005d18:	6a39      	ldr	r1, [r7, #32]
 8005d1a:	4401      	add	r1, r0
 8005d1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005d20:	4313      	orrs	r3, r2
 8005d22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a42      	ldr	r2, [pc, #264]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d34:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d36:	4b41      	ldr	r3, [pc, #260]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d3e:	4a3f      	ldr	r2, [pc, #252]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d40:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	78db      	ldrb	r3, [r3, #3]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d006      	beq.n	8005d58 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005d4a:	4b3c      	ldr	r3, [pc, #240]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d52:	4a3a      	ldr	r2, [pc, #232]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e005      	b.n	8005d64 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005d58:	4b38      	ldr	r3, [pc, #224]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d60:	4a36      	ldr	r2, [pc, #216]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d62:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d64:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	4a33      	ldr	r2, [pc, #204]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d6e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <USB_HC_StartXfer+0x288>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005d84:	79fb      	ldrb	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	e04f      	b.n	8005e2e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	78db      	ldrb	r3, [r3, #3]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d14a      	bne.n	8005e2c <USB_HC_StartXfer+0x278>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d046      	beq.n	8005e2c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	79db      	ldrb	r3, [r3, #7]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d830      	bhi.n	8005e08 <USB_HC_StartXfer+0x254>
 8005da6:	a201      	add	r2, pc, #4	; (adr r2, 8005dac <USB_HC_StartXfer+0x1f8>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dbd 	.word	0x08005dbd
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005dbd 	.word	0x08005dbd
 8005db8:	08005de1 	.word	0x08005de1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	3303      	adds	r3, #3
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005dc6:	8afa      	ldrh	r2, [r7, #22]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d91c      	bls.n	8005e0c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f043 0220 	orr.w	r2, r3, #32
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005dde:	e015      	b.n	8005e0c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	3303      	adds	r3, #3
 8005de6:	089b      	lsrs	r3, r3, #2
 8005de8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005dea:	8afa      	ldrh	r2, [r7, #22]
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d90a      	bls.n	8005e10 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	619a      	str	r2, [r3, #24]
        }
        break;
 8005e06:	e003      	b.n	8005e10 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005e08:	bf00      	nop
 8005e0a:	e002      	b.n	8005e12 <USB_HC_StartXfer+0x25e>
        break;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <USB_HC_StartXfer+0x25e>
        break;
 8005e10:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	68d9      	ldr	r1, [r3, #12]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785a      	ldrb	r2, [r3, #1]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	b298      	uxth	r0, r3
 8005e20:	2300      	movs	r3, #0
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff fbc6 	bl	80055b8 <USB_WritePacket>
  }

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3728      	adds	r7, #40	; 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	1ff80000 	.word	0x1ff80000
 8005e3c:	200000c0 	.word	0x200000c0

08005e40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	b29b      	uxth	r3, r3
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0c9b      	lsrs	r3, r3, #18
 8005e8a:	f003 0303 	and.w	r3, r3, #3
 8005e8e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <USB_HC_Halt+0x3a>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d16c      	bne.n	8005f76 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	015a      	lsls	r2, r3, #5
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4413      	add	r3, r2
 8005ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eba:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d143      	bne.n	8005f50 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ee6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f26:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f34:	d81d      	bhi.n	8005f72 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	015a      	lsls	r2, r3, #5
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f4c:	d0ec      	beq.n	8005f28 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f4e:	e080      	b.n	8006052 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f6e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f70:	e06f      	b.n	8006052 <USB_HC_Halt+0x1f0>
          break;
 8005f72:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f74:	e06d      	b.n	8006052 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f94:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d143      	bne.n	800602e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	0151      	lsls	r1, r2, #5
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	440a      	add	r2, r1
 8005fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fc4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	0151      	lsls	r1, r2, #5
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	440a      	add	r2, r1
 8005fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006004:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	3301      	adds	r3, #1
 800600a:	617b      	str	r3, [r7, #20]
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006012:	d81d      	bhi.n	8006050 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602a:	d0ec      	beq.n	8006006 <USB_HC_Halt+0x1a4>
 800602c:	e011      	b.n	8006052 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	4413      	add	r3, r2
 8006036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	0151      	lsls	r1, r2, #5
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	440a      	add	r2, r1
 8006044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e000      	b.n	8006052 <USB_HC_Halt+0x1f0>
          break;
 8006050:	bf00      	nop
    }
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006074:	2301      	movs	r3, #1
 8006076:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	04da      	lsls	r2, r3, #19
 800607c:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <USB_DoPing+0x74>)
 800607e:	4013      	ands	r3, r2
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	440a      	add	r2, r1
 8006088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800608c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006090:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060be:	461a      	mov	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	1ff80000 	.word	0x1ff80000

080060d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff f9e1 	bl	80054b0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80060ee:	2110      	movs	r1, #16
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fa19 	bl	8005528 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7ff fa3c 	bl	8005574 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
 8006100:	e01f      	b.n	8006142 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006118:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006120:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006128:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	3301      	adds	r3, #1
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	2b0f      	cmp	r3, #15
 8006146:	d9dc      	bls.n	8006102 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006148:	2300      	movs	r3, #0
 800614a:	613b      	str	r3, [r7, #16]
 800614c:	e034      	b.n	80061b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006164:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800616c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006174:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006182:	461a      	mov	r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	3301      	adds	r3, #1
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006194:	d80c      	bhi.n	80061b0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ac:	d0ec      	beq.n	8006188 <USB_StopHost+0xb0>
 80061ae:	e000      	b.n	80061b2 <USB_StopHost+0xda>
        break;
 80061b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b0f      	cmp	r3, #15
 80061bc:	d9c7      	bls.n	800614e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061c4:	461a      	mov	r2, r3
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f04f 32ff 	mov.w	r2, #4294967295
 80061d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff f95a 	bl	800548e <USB_EnableGlobalInt>

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80061e4:	b590      	push	{r4, r7, lr}
 80061e6:	b089      	sub	sp, #36	; 0x24
 80061e8:	af04      	add	r7, sp, #16
 80061ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80061ec:	2301      	movs	r3, #1
 80061ee:	2202      	movs	r2, #2
 80061f0:	2102      	movs	r1, #2
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fc68 	bl	8006ac8 <USBH_FindInterface>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2bff      	cmp	r3, #255	; 0xff
 8006200:	d002      	beq.n	8006208 <USBH_CDC_InterfaceInit+0x24>
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d901      	bls.n	800620c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006208:	2302      	movs	r3, #2
 800620a:	e13d      	b.n	8006488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fc3d 	bl	8006a90 <USBH_SelectInterface>
 8006216:	4603      	mov	r3, r0
 8006218:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006220:	2302      	movs	r3, #2
 8006222:	e131      	b.n	8006488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800622a:	2050      	movs	r0, #80	; 0x50
 800622c:	f001 fb1a 	bl	8007864 <malloc>
 8006230:	4603      	mov	r3, r0
 8006232:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006244:	2302      	movs	r3, #2
 8006246:	e11f      	b.n	8006488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006248:	2250      	movs	r2, #80	; 0x50
 800624a:	2100      	movs	r1, #0
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	f001 fb19 	bl	8007884 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	211a      	movs	r1, #26
 8006258:	fb01 f303 	mul.w	r3, r1, r3
 800625c:	4413      	add	r3, r2
 800625e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	b25b      	sxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	da15      	bge.n	8006296 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	211a      	movs	r1, #26
 8006270:	fb01 f303 	mul.w	r3, r1, r3
 8006274:	4413      	add	r3, r2
 8006276:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800627a:	781a      	ldrb	r2, [r3, #0]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	211a      	movs	r1, #26
 8006286:	fb01 f303 	mul.w	r3, r1, r3
 800628a:	4413      	add	r3, r2
 800628c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006290:	881a      	ldrh	r2, [r3, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	785b      	ldrb	r3, [r3, #1]
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 ffa0 	bl	80071e2 <USBH_AllocPipe>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	7819      	ldrb	r1, [r3, #0]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	7858      	ldrb	r0, [r3, #1]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	8952      	ldrh	r2, [r2, #10]
 80062c2:	9202      	str	r2, [sp, #8]
 80062c4:	2203      	movs	r2, #3
 80062c6:	9201      	str	r2, [sp, #4]
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	4623      	mov	r3, r4
 80062cc:	4602      	mov	r2, r0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 ff58 	bl	8007184 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2200      	movs	r2, #0
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 fa1b 	bl	8007718 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80062e2:	2300      	movs	r3, #0
 80062e4:	2200      	movs	r2, #0
 80062e6:	210a      	movs	r1, #10
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fbed 	bl	8006ac8 <USBH_FindInterface>
 80062ee:	4603      	mov	r3, r0
 80062f0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	2bff      	cmp	r3, #255	; 0xff
 80062f6:	d002      	beq.n	80062fe <USBH_CDC_InterfaceInit+0x11a>
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d901      	bls.n	8006302 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80062fe:	2302      	movs	r3, #2
 8006300:	e0c2      	b.n	8006488 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	211a      	movs	r1, #26
 8006308:	fb01 f303 	mul.w	r3, r1, r3
 800630c:	4413      	add	r3, r2
 800630e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	b25b      	sxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	da16      	bge.n	8006348 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	211a      	movs	r1, #26
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	4413      	add	r3, r2
 8006326:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800632a:	781a      	ldrb	r2, [r3, #0]
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006330:	7bfb      	ldrb	r3, [r7, #15]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	211a      	movs	r1, #26
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	4413      	add	r3, r2
 800633c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006340:	881a      	ldrh	r2, [r3, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	835a      	strh	r2, [r3, #26]
 8006346:	e015      	b.n	8006374 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	211a      	movs	r1, #26
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	4413      	add	r3, r2
 8006354:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	211a      	movs	r1, #26
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	4413      	add	r3, r2
 800636a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800636e:	881a      	ldrh	r2, [r3, #0]
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	211a      	movs	r1, #26
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	4413      	add	r3, r2
 8006380:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	b25b      	sxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	da16      	bge.n	80063ba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	211a      	movs	r1, #26
 8006392:	fb01 f303 	mul.w	r3, r1, r3
 8006396:	4413      	add	r3, r2
 8006398:	f203 3356 	addw	r3, r3, #854	; 0x356
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	211a      	movs	r1, #26
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80063b2:	881a      	ldrh	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	835a      	strh	r2, [r3, #26]
 80063b8:	e015      	b.n	80063e6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	211a      	movs	r1, #26
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80063ca:	781a      	ldrb	r2, [r3, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	211a      	movs	r1, #26
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	4413      	add	r3, r2
 80063dc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80063e0:	881a      	ldrh	r2, [r3, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	7b9b      	ldrb	r3, [r3, #14]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fef8 	bl	80071e2 <USBH_AllocPipe>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	7bdb      	ldrb	r3, [r3, #15]
 80063fe:	4619      	mov	r1, r3
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 feee 	bl	80071e2 <USBH_AllocPipe>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	7b59      	ldrb	r1, [r3, #13]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	7b98      	ldrb	r0, [r3, #14]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	8b12      	ldrh	r2, [r2, #24]
 8006426:	9202      	str	r2, [sp, #8]
 8006428:	2202      	movs	r2, #2
 800642a:	9201      	str	r2, [sp, #4]
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4623      	mov	r3, r4
 8006430:	4602      	mov	r2, r0
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 fea6 	bl	8007184 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	7b19      	ldrb	r1, [r3, #12]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	7bd8      	ldrb	r0, [r3, #15]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	8b52      	ldrh	r2, [r2, #26]
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	2202      	movs	r2, #2
 8006454:	9201      	str	r2, [sp, #4]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4623      	mov	r3, r4
 800645a:	4602      	mov	r2, r0
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fe91 	bl	8007184 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	7b5b      	ldrb	r3, [r3, #13]
 800646e:	2200      	movs	r2, #0
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f950 	bl	8007718 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	7b1b      	ldrb	r3, [r3, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 f949 	bl	8007718 <USBH_LL_SetToggle>

  return USBH_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bd90      	pop	{r4, r7, pc}

08006490 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00e      	beq.n	80064c8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fe86 	bl	80071c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 feb1 	bl	8007224 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	7b1b      	ldrb	r3, [r3, #12]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00e      	beq.n	80064ee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	7b1b      	ldrb	r3, [r3, #12]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fe73 	bl	80071c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	7b1b      	ldrb	r3, [r3, #12]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fe9e 	bl	8007224 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	7b5b      	ldrb	r3, [r3, #13]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00e      	beq.n	8006514 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	7b5b      	ldrb	r3, [r3, #13]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fe60 	bl	80071c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	7b5b      	ldrb	r3, [r3, #13]
 8006506:	4619      	mov	r1, r3
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fe8b 	bl	8007224 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00b      	beq.n	8006538 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f9a3 	bl	8007874 <free>
    phost->pActiveClass->pData = 0U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006534:	2200      	movs	r2, #0
 8006536:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3340      	adds	r3, #64	; 0x40
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f8b1 	bl	80066c2 <GetLineCoding>
 8006560:	4603      	mov	r3, r0
 8006562:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d105      	bne.n	8006576 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006570:	2102      	movs	r1, #2
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006576:	7afb      	ldrb	r3, [r7, #11]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80065a0:	2b04      	cmp	r3, #4
 80065a2:	d877      	bhi.n	8006694 <USBH_CDC_Process+0x114>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <USBH_CDC_Process+0x2c>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065c1 	.word	0x080065c1
 80065b0:	080065c7 	.word	0x080065c7
 80065b4:	080065f7 	.word	0x080065f7
 80065b8:	0800666b 	.word	0x0800666b
 80065bc:	08006679 	.word	0x08006679
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e06d      	b.n	80066a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	4619      	mov	r1, r3
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f897 	bl	8006700 <SetLineCoding>
 80065d2:	4603      	mov	r3, r0
 80065d4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065d6:	7bbb      	ldrb	r3, [r7, #14]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065e4:	e058      	b.n	8006698 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d055      	beq.n	8006698 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2204      	movs	r2, #4
 80065f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80065f4:	e050      	b.n	8006698 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	3340      	adds	r3, #64	; 0x40
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f860 	bl	80066c2 <GetLineCoding>
 8006602:	4603      	mov	r3, r0
 8006604:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d126      	bne.n	800665a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661e:	791b      	ldrb	r3, [r3, #4]
 8006620:	429a      	cmp	r2, r3
 8006622:	d13b      	bne.n	800669c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800662e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006630:	429a      	cmp	r2, r3
 8006632:	d133      	bne.n	800669c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006640:	429a      	cmp	r2, r3
 8006642:	d12b      	bne.n	800669c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800664e:	429a      	cmp	r2, r3
 8006650:	d124      	bne.n	800669c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f95a 	bl	800690c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006658:	e020      	b.n	800669c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d01d      	beq.n	800669c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2204      	movs	r2, #4
 8006664:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006668:	e018      	b.n	800669c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f867 	bl	800673e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f8dc 	bl	800682e <CDC_ProcessReception>
      break;
 8006676:	e014      	b.n	80066a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006678:	2100      	movs	r1, #0
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb0a 	bl	8006c94 <USBH_ClrFeature>
 8006680:	4603      	mov	r3, r0
 8006682:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006692:	e005      	b.n	80066a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8006694:	bf00      	nop
 8006696:	e004      	b.n	80066a2 <USBH_CDC_Process+0x122>
      break;
 8006698:	bf00      	nop
 800669a:	e002      	b.n	80066a2 <USBH_CDC_Process+0x122>
      break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <USBH_CDC_Process+0x122>
      break;
 80066a0:	bf00      	nop

  }

  return status;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	22a1      	movs	r2, #161	; 0xa1
 80066d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2221      	movs	r2, #33	; 0x21
 80066d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2207      	movs	r2, #7
 80066e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2207      	movs	r2, #7
 80066ee:	4619      	mov	r1, r3
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 faf3 	bl	8006cdc <USBH_CtlReq>
 80066f6:	4603      	mov	r3, r0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2221      	movs	r2, #33	; 0x21
 800670e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2207      	movs	r2, #7
 8006726:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2207      	movs	r2, #7
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fad4 	bl	8006cdc <USBH_CtlReq>
 8006734:	4603      	mov	r3, r0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af02      	add	r7, sp, #8
 8006744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006750:	2300      	movs	r3, #0
 8006752:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800675a:	2b01      	cmp	r3, #1
 800675c:	d002      	beq.n	8006764 <CDC_ProcessTransmission+0x26>
 800675e:	2b02      	cmp	r3, #2
 8006760:	d025      	beq.n	80067ae <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8006762:	e060      	b.n	8006826 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	8b12      	ldrh	r2, [r2, #24]
 800676c:	4293      	cmp	r3, r2
 800676e:	d90c      	bls.n	800678a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	69d9      	ldr	r1, [r3, #28]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8b1a      	ldrh	r2, [r3, #24]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	7b58      	ldrb	r0, [r3, #13]
 800677c:	2301      	movs	r3, #1
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4603      	mov	r3, r0
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 fcbb 	bl	80070fe <USBH_BulkSendData>
 8006788:	e00c      	b.n	80067a4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006792:	b29a      	uxth	r2, r3
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	7b58      	ldrb	r0, [r3, #13]
 8006798:	2301      	movs	r3, #1
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4603      	mov	r3, r0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fcad 	bl	80070fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2202      	movs	r2, #2
 80067a8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80067ac:	e03b      	b.n	8006826 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	7b5b      	ldrb	r3, [r3, #13]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 ff85 	bl	80076c4 <USBH_LL_GetURBState>
 80067ba:	4603      	mov	r3, r0
 80067bc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80067be:	7afb      	ldrb	r3, [r7, #11]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d128      	bne.n	8006816 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	8b12      	ldrh	r2, [r2, #24]
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d90e      	bls.n	80067ee <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	8b12      	ldrh	r2, [r2, #24]
 80067d8:	1a9a      	subs	r2, r3, r2
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	8b12      	ldrh	r2, [r2, #24]
 80067e6:	441a      	add	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	61da      	str	r2, [r3, #28]
 80067ec:	e002      	b.n	80067f4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006804:	e00e      	b.n	8006824 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f868 	bl	80068e4 <USBH_CDC_TransmitCallback>
      break;
 8006814:	e006      	b.n	8006824 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d103      	bne.n	8006824 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006824:	bf00      	nop
  }
}
 8006826:	bf00      	nop
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006840:	2300      	movs	r3, #0
 8006842:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800684a:	2b03      	cmp	r3, #3
 800684c:	d002      	beq.n	8006854 <CDC_ProcessReception+0x26>
 800684e:	2b04      	cmp	r3, #4
 8006850:	d00e      	beq.n	8006870 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006852:	e043      	b.n	80068dc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6a19      	ldr	r1, [r3, #32]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	8b5a      	ldrh	r2, [r3, #26]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	7b1b      	ldrb	r3, [r3, #12]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fc71 	bl	8007148 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2204      	movs	r2, #4
 800686a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800686e:	e035      	b.n	80068dc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	7b1b      	ldrb	r3, [r3, #12]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 ff24 	bl	80076c4 <USBH_LL_GetURBState>
 800687c:	4603      	mov	r3, r0
 800687e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d129      	bne.n	80068da <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	7b1b      	ldrb	r3, [r3, #12]
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fe87 	bl	80075a0 <USBH_LL_GetLastXferSize>
 8006892:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	429a      	cmp	r2, r3
 800689c:	d016      	beq.n	80068cc <CDC_ProcessReception+0x9e>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	8b5b      	ldrh	r3, [r3, #26]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d910      	bls.n	80068cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1ad2      	subs	r2, r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a1a      	ldr	r2, [r3, #32]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	441a      	add	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2203      	movs	r2, #3
 80068c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80068ca:	e006      	b.n	80068da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f80f 	bl	80068f8 <USBH_CDC_ReceiveCallback>
      break;
 80068da:	bf00      	nop
  }
}
 80068dc:	bf00      	nop
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	4613      	mov	r3, r2
 800692c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006934:	2302      	movs	r3, #2
 8006936:	e029      	b.n	800698c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	79fa      	ldrb	r2, [r7, #7]
 800693c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f81f 	bl	8006994 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d003      	beq.n	8006984 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fd99 	bl	80074bc <USBH_LL_Init>

  return USBH_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e009      	b.n	80069ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	33e0      	adds	r3, #224	; 0xe0
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	2200      	movs	r2, #0
 80069b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2b0e      	cmp	r3, #14
 80069be:	d9f2      	bls.n	80069a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e009      	b.n	80069da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d3f1      	bcc.n	80069c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2240      	movs	r2, #64	; 0x40
 8006a06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d016      	beq.n	8006a7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10e      	bne.n	8006a78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006a60:	1c59      	adds	r1, r3, #1
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	33de      	adds	r3, #222	; 0xde
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	e004      	b.n	8006a82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	73fb      	strb	r3, [r7, #15]
 8006a7c:	e001      	b.n	8006a82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	460b      	mov	r3, r1
 8006a9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006aa6:	78fa      	ldrb	r2, [r7, #3]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d204      	bcs.n	8006ab6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006ab4:	e001      	b.n	8006aba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	70fb      	strb	r3, [r7, #3]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70bb      	strb	r3, [r7, #2]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006af0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006af2:	e025      	b.n	8006b40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	221a      	movs	r2, #26
 8006af8:	fb02 f303 	mul.w	r3, r2, r3
 8006afc:	3308      	adds	r3, #8
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4413      	add	r3, r2
 8006b02:	3302      	adds	r3, #2
 8006b04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	795b      	ldrb	r3, [r3, #5]
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d002      	beq.n	8006b16 <USBH_FindInterface+0x4e>
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	2bff      	cmp	r3, #255	; 0xff
 8006b14:	d111      	bne.n	8006b3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b1a:	78ba      	ldrb	r2, [r7, #2]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d002      	beq.n	8006b26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b20:	78bb      	ldrb	r3, [r7, #2]
 8006b22:	2bff      	cmp	r3, #255	; 0xff
 8006b24:	d109      	bne.n	8006b3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b2a:	787a      	ldrb	r2, [r7, #1]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d002      	beq.n	8006b36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b30:	787b      	ldrb	r3, [r7, #1]
 8006b32:	2bff      	cmp	r3, #255	; 0xff
 8006b34:	d101      	bne.n	8006b3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b36:	7dfb      	ldrb	r3, [r7, #23]
 8006b38:	e006      	b.n	8006b48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d9d6      	bls.n	8006af4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b46:	23ff      	movs	r3, #255	; 0xff
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fce9 	bl	8007534 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8006b62:	2101      	movs	r1, #1
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fdc0 	bl	80076ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 f804 	bl	8006bb6 <USBH_HandleSof>
}
 8006bae:	bf00      	nop
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b0b      	cmp	r3, #11
 8006bc6:	d10a      	bne.n	8006bde <USBH_HandleSof+0x28>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	4798      	blx	r3
  }
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006bf6:	bf00      	nop
}
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006c12:	bf00      	nop
}
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fc7c 	bl	800756a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	791b      	ldrb	r3, [r3, #4]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fad3 	bl	8007224 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	795b      	ldrb	r3, [r3, #5]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 facd 	bl	8007224 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	789b      	ldrb	r3, [r3, #2]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d10f      	bne.n	8006cc8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f805 	bl	8006cdc <USBH_CtlReq>
 8006cd2:	4603      	mov	r3, r0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	789b      	ldrb	r3, [r3, #2]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d002      	beq.n	8006cfc <USBH_CtlReq+0x20>
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d00f      	beq.n	8006d1a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006cfa:	e027      	b.n	8006d4c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2202      	movs	r2, #2
 8006d12:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
      break;
 8006d18:	e018      	b.n	8006d4c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f81c 	bl	8006d58 <USBH_HandleControl>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d002      	beq.n	8006d30 <USBH_CtlReq+0x54>
 8006d2a:	7dfb      	ldrb	r3, [r7, #23]
 8006d2c:	2b03      	cmp	r3, #3
 8006d2e:	d106      	bne.n	8006d3e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	761a      	strb	r2, [r3, #24]
      break;
 8006d3c:	e005      	b.n	8006d4a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d102      	bne.n	8006d4a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	709a      	strb	r2, [r3, #2]
      break;
 8006d4a:	bf00      	nop
  }
  return status;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af02      	add	r7, sp, #8
 8006d5e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	7e1b      	ldrb	r3, [r3, #24]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	2b0a      	cmp	r3, #10
 8006d70:	f200 8158 	bhi.w	8007024 <USBH_HandleControl+0x2cc>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <USBH_HandleControl+0x24>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	08006dc3 	.word	0x08006dc3
 8006d84:	08006e2d 	.word	0x08006e2d
 8006d88:	08006e53 	.word	0x08006e53
 8006d8c:	08006e8b 	.word	0x08006e8b
 8006d90:	08006eb7 	.word	0x08006eb7
 8006d94:	08006f09 	.word	0x08006f09
 8006d98:	08006f2b 	.word	0x08006f2b
 8006d9c:	08006f67 	.word	0x08006f67
 8006da0:	08006f8f 	.word	0x08006f8f
 8006da4:	08006fcd 	.word	0x08006fcd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f103 0110 	add.w	r1, r3, #16
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	795b      	ldrb	r3, [r3, #5]
 8006db2:	461a      	mov	r2, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f945 	bl	8007044 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	761a      	strb	r2, [r3, #24]
      break;
 8006dc0:	e13b      	b.n	800703a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	795b      	ldrb	r3, [r3, #5]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fc7b 	bl	80076c4 <USBH_LL_GetURBState>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d11e      	bne.n	8006e16 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7c1b      	ldrb	r3, [r3, #16]
 8006ddc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006de0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8adb      	ldrh	r3, [r3, #22]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006dea:	7b7b      	ldrb	r3, [r7, #13]
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d103      	bne.n	8006df8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2203      	movs	r2, #3
 8006df4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006df6:	e117      	b.n	8007028 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2205      	movs	r2, #5
 8006dfc:	761a      	strb	r2, [r3, #24]
      break;
 8006dfe:	e113      	b.n	8007028 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8006e00:	7b7b      	ldrb	r3, [r7, #13]
 8006e02:	2b80      	cmp	r3, #128	; 0x80
 8006e04:	d103      	bne.n	8006e0e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2209      	movs	r2, #9
 8006e0a:	761a      	strb	r2, [r3, #24]
      break;
 8006e0c:	e10c      	b.n	8007028 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2207      	movs	r2, #7
 8006e12:	761a      	strb	r2, [r3, #24]
      break;
 8006e14:	e108      	b.n	8007028 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d003      	beq.n	8006e24 <USBH_HandleControl+0xcc>
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	f040 8102 	bne.w	8007028 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	220b      	movs	r2, #11
 8006e28:	761a      	strb	r2, [r3, #24]
      break;
 8006e2a:	e0fd      	b.n	8007028 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6899      	ldr	r1, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	899a      	ldrh	r2, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	791b      	ldrb	r3, [r3, #4]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f93c 	bl	80070c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2204      	movs	r2, #4
 8006e4e:	761a      	strb	r2, [r3, #24]
      break;
 8006e50:	e0f3      	b.n	800703a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	791b      	ldrb	r3, [r3, #4]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc33 	bl	80076c4 <USBH_LL_GetURBState>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d102      	bne.n	8006e6e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2209      	movs	r2, #9
 8006e6c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d102      	bne.n	8006e7a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006e74:	2303      	movs	r3, #3
 8006e76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006e78:	e0d8      	b.n	800702c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	f040 80d5 	bne.w	800702c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	220b      	movs	r2, #11
 8006e86:	761a      	strb	r2, [r3, #24]
      break;
 8006e88:	e0d0      	b.n	800702c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6899      	ldr	r1, [r3, #8]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	899a      	ldrh	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	7958      	ldrb	r0, [r3, #5]
 8006e96:	2301      	movs	r3, #1
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 f8eb 	bl	8007078 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2206      	movs	r2, #6
 8006eb2:	761a      	strb	r2, [r3, #24]
      break;
 8006eb4:	e0c1      	b.n	800703a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	795b      	ldrb	r3, [r3, #5]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fc01 	bl	80076c4 <USBH_LL_GetURBState>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d103      	bne.n	8006ed4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ed2:	e0ad      	b.n	8007030 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	2b05      	cmp	r3, #5
 8006ed8:	d105      	bne.n	8006ee6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	220c      	movs	r2, #12
 8006ede:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee4:	e0a4      	b.n	8007030 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d103      	bne.n	8006ef4 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2205      	movs	r2, #5
 8006ef0:	761a      	strb	r2, [r3, #24]
      break;
 8006ef2:	e09d      	b.n	8007030 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	f040 809a 	bne.w	8007030 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	220b      	movs	r2, #11
 8006f00:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006f02:	2302      	movs	r3, #2
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	e093      	b.n	8007030 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	791b      	ldrb	r3, [r3, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8d6 	bl	80070c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2208      	movs	r2, #8
 8006f26:	761a      	strb	r2, [r3, #24]

      break;
 8006f28:	e087      	b.n	800703a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	791b      	ldrb	r3, [r3, #4]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fbc7 	bl	80076c4 <USBH_LL_GetURBState>
 8006f36:	4603      	mov	r3, r0
 8006f38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d105      	bne.n	8006f4c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	220d      	movs	r2, #13
 8006f44:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f4a:	e073      	b.n	8007034 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	d103      	bne.n	8006f5a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	220b      	movs	r2, #11
 8006f56:	761a      	strb	r2, [r3, #24]
      break;
 8006f58:	e06c      	b.n	8007034 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8006f5a:	7bbb      	ldrb	r3, [r7, #14]
 8006f5c:	2b05      	cmp	r3, #5
 8006f5e:	d169      	bne.n	8007034 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8006f60:	2303      	movs	r3, #3
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e066      	b.n	8007034 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	795a      	ldrb	r2, [r3, #5]
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	2200      	movs	r2, #0
 8006f72:	2100      	movs	r1, #0
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f87f 	bl	8007078 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	220a      	movs	r2, #10
 8006f8a:	761a      	strb	r2, [r3, #24]
      break;
 8006f8c:	e055      	b.n	800703a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	795b      	ldrb	r3, [r3, #5]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fb95 	bl	80076c4 <USBH_LL_GetURBState>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d105      	bne.n	8006fb0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220d      	movs	r2, #13
 8006fac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fae:	e043      	b.n	8007038 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d103      	bne.n	8006fbe <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2209      	movs	r2, #9
 8006fba:	761a      	strb	r2, [r3, #24]
      break;
 8006fbc:	e03c      	b.n	8007038 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d139      	bne.n	8007038 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	220b      	movs	r2, #11
 8006fc8:	761a      	strb	r2, [r3, #24]
      break;
 8006fca:	e035      	b.n	8007038 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7e5b      	ldrb	r3, [r3, #25]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	765a      	strb	r2, [r3, #25]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	7e5b      	ldrb	r3, [r3, #25]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d806      	bhi.n	8006fee <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006fec:	e025      	b.n	800703a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ff4:	2106      	movs	r1, #6
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	795b      	ldrb	r3, [r3, #5]
 8007004:	4619      	mov	r1, r3
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f90c 	bl	8007224 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	791b      	ldrb	r3, [r3, #4]
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f906 	bl	8007224 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800701e:	2302      	movs	r3, #2
 8007020:	73fb      	strb	r3, [r7, #15]
      break;
 8007022:	e00a      	b.n	800703a <USBH_HandleControl+0x2e2>

    default:
      break;
 8007024:	bf00      	nop
 8007026:	e008      	b.n	800703a <USBH_HandleControl+0x2e2>
      break;
 8007028:	bf00      	nop
 800702a:	e006      	b.n	800703a <USBH_HandleControl+0x2e2>
      break;
 800702c:	bf00      	nop
 800702e:	e004      	b.n	800703a <USBH_HandleControl+0x2e2>
      break;
 8007030:	bf00      	nop
 8007032:	e002      	b.n	800703a <USBH_HandleControl+0x2e2>
      break;
 8007034:	bf00      	nop
 8007036:	e000      	b.n	800703a <USBH_HandleControl+0x2e2>
      break;
 8007038:	bf00      	nop
  }

  return status;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af04      	add	r7, sp, #16
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	4613      	mov	r3, r2
 8007050:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007052:	79f9      	ldrb	r1, [r7, #7]
 8007054:	2300      	movs	r3, #0
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	2308      	movs	r3, #8
 800705a:	9302      	str	r3, [sp, #8]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	9301      	str	r3, [sp, #4]
 8007060:	2300      	movs	r3, #0
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	2300      	movs	r3, #0
 8007066:	2200      	movs	r2, #0
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 fafa 	bl	8007662 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3710      	adds	r7, #16
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}

08007078 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b088      	sub	sp, #32
 800707c:	af04      	add	r7, sp, #16
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	4611      	mov	r1, r2
 8007084:	461a      	mov	r2, r3
 8007086:	460b      	mov	r3, r1
 8007088:	80fb      	strh	r3, [r7, #6]
 800708a:	4613      	mov	r3, r2
 800708c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800709c:	7979      	ldrb	r1, [r7, #5]
 800709e:	7e3b      	ldrb	r3, [r7, #24]
 80070a0:	9303      	str	r3, [sp, #12]
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	9302      	str	r3, [sp, #8]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	2301      	movs	r3, #1
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	2300      	movs	r3, #0
 80070b0:	2200      	movs	r2, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 fad5 	bl	8007662 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b088      	sub	sp, #32
 80070c6:	af04      	add	r7, sp, #16
 80070c8:	60f8      	str	r0, [r7, #12]
 80070ca:	60b9      	str	r1, [r7, #8]
 80070cc:	4611      	mov	r1, r2
 80070ce:	461a      	mov	r2, r3
 80070d0:	460b      	mov	r3, r1
 80070d2:	80fb      	strh	r3, [r7, #6]
 80070d4:	4613      	mov	r3, r2
 80070d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80070d8:	7979      	ldrb	r1, [r7, #5]
 80070da:	2300      	movs	r3, #0
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	88fb      	ldrh	r3, [r7, #6]
 80070e0:	9302      	str	r3, [sp, #8]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	9301      	str	r3, [sp, #4]
 80070e6:	2301      	movs	r3, #1
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	2300      	movs	r3, #0
 80070ec:	2201      	movs	r2, #1
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fab7 	bl	8007662 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80070f4:	2300      	movs	r3, #0

}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b088      	sub	sp, #32
 8007102:	af04      	add	r7, sp, #16
 8007104:	60f8      	str	r0, [r7, #12]
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	4611      	mov	r1, r2
 800710a:	461a      	mov	r2, r3
 800710c:	460b      	mov	r3, r1
 800710e:	80fb      	strh	r3, [r7, #6]
 8007110:	4613      	mov	r3, r2
 8007112:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800711e:	2300      	movs	r3, #0
 8007120:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007122:	7979      	ldrb	r1, [r7, #5]
 8007124:	7e3b      	ldrb	r3, [r7, #24]
 8007126:	9303      	str	r3, [sp, #12]
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	2301      	movs	r3, #1
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2302      	movs	r3, #2
 8007136:	2200      	movs	r2, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fa92 	bl	8007662 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af04      	add	r7, sp, #16
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	460b      	mov	r3, r1
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800715e:	7979      	ldrb	r1, [r7, #5]
 8007160:	2300      	movs	r3, #0
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	88fb      	ldrh	r3, [r7, #6]
 8007166:	9302      	str	r3, [sp, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	9301      	str	r3, [sp, #4]
 800716c:	2301      	movs	r3, #1
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2302      	movs	r3, #2
 8007172:	2201      	movs	r2, #1
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 fa74 	bl	8007662 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b086      	sub	sp, #24
 8007188:	af04      	add	r7, sp, #16
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	461a      	mov	r2, r3
 8007192:	4603      	mov	r3, r0
 8007194:	70fb      	strb	r3, [r7, #3]
 8007196:	460b      	mov	r3, r1
 8007198:	70bb      	strb	r3, [r7, #2]
 800719a:	4613      	mov	r3, r2
 800719c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800719e:	7878      	ldrb	r0, [r7, #1]
 80071a0:	78ba      	ldrb	r2, [r7, #2]
 80071a2:	78f9      	ldrb	r1, [r7, #3]
 80071a4:	8b3b      	ldrh	r3, [r7, #24]
 80071a6:	9302      	str	r3, [sp, #8]
 80071a8:	7d3b      	ldrb	r3, [r7, #20]
 80071aa:	9301      	str	r3, [sp, #4]
 80071ac:	7c3b      	ldrb	r3, [r7, #16]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	4603      	mov	r3, r0
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f000 fa07 	bl	80075c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
 80071ca:	460b      	mov	r3, r1
 80071cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fa26 	bl	8007624 <USBH_LL_ClosePipe>

  return USBH_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	460b      	mov	r3, r1
 80071ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f836 	bl	8007260 <USBH_GetFreePipe>
 80071f4:	4603      	mov	r3, r0
 80071f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80071f8:	89fb      	ldrh	r3, [r7, #14]
 80071fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00a      	beq.n	8007218 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007202:	78fa      	ldrb	r2, [r7, #3]
 8007204:	89fb      	ldrh	r3, [r7, #14]
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	33e0      	adds	r3, #224	; 0xe0
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007218:	89fb      	ldrh	r3, [r7, #14]
 800721a:	b2db      	uxtb	r3, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	460b      	mov	r3, r1
 800722e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	2b0a      	cmp	r3, #10
 8007234:	d80d      	bhi.n	8007252 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	33e0      	adds	r3, #224	; 0xe0
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	685a      	ldr	r2, [r3, #4]
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	33e0      	adds	r3, #224	; 0xe0
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
 8007270:	e00f      	b.n	8007292 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	33e0      	adds	r3, #224	; 0xe0
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	b29b      	uxth	r3, r3
 800728a:	e007      	b.n	800729c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	3301      	adds	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	2b0a      	cmp	r3, #10
 8007296:	d9ec      	bls.n	8007272 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007298:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80072ac:	2201      	movs	r2, #1
 80072ae:	490e      	ldr	r1, [pc, #56]	; (80072e8 <MX_USB_HOST_Init+0x40>)
 80072b0:	480e      	ldr	r0, [pc, #56]	; (80072ec <MX_USB_HOST_Init+0x44>)
 80072b2:	f7ff fb35 	bl	8006920 <USBH_Init>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80072bc:	f7f9 fc14 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80072c0:	490b      	ldr	r1, [pc, #44]	; (80072f0 <MX_USB_HOST_Init+0x48>)
 80072c2:	480a      	ldr	r0, [pc, #40]	; (80072ec <MX_USB_HOST_Init+0x44>)
 80072c4:	f7ff fbba 	bl	8006a3c <USBH_RegisterClass>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80072ce:	f7f9 fc0b 	bl	8000ae8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80072d2:	4806      	ldr	r0, [pc, #24]	; (80072ec <MX_USB_HOST_Init+0x44>)
 80072d4:	f7ff fc3e 	bl	8006b54 <USBH_Start>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80072de:	f7f9 fc03 	bl	8000ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80072e2:	bf00      	nop
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	080072f5 	.word	0x080072f5
 80072ec:	2000020c 	.word	0x2000020c
 80072f0:	2000000c 	.word	0x2000000c

080072f4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	3b01      	subs	r3, #1
 8007304:	2b04      	cmp	r3, #4
 8007306:	d819      	bhi.n	800733c <USBH_UserProcess+0x48>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <USBH_UserProcess+0x1c>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	0800733d 	.word	0x0800733d
 8007314:	0800732d 	.word	0x0800732d
 8007318:	0800733d 	.word	0x0800733d
 800731c:	08007335 	.word	0x08007335
 8007320:	08007325 	.word	0x08007325
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <USBH_UserProcess+0x58>)
 8007326:	2203      	movs	r2, #3
 8007328:	701a      	strb	r2, [r3, #0]
  break;
 800732a:	e008      	b.n	800733e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <USBH_UserProcess+0x58>)
 800732e:	2202      	movs	r2, #2
 8007330:	701a      	strb	r2, [r3, #0]
  break;
 8007332:	e004      	b.n	800733e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <USBH_UserProcess+0x58>)
 8007336:	2201      	movs	r2, #1
 8007338:	701a      	strb	r2, [r3, #0]
  break;
 800733a:	e000      	b.n	800733e <USBH_UserProcess+0x4a>

  default:
  break;
 800733c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	200000c4 	.word	0x200000c4

08007350 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007358:	f107 0314 	add.w	r3, r7, #20
 800735c:	2200      	movs	r2, #0
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	605a      	str	r2, [r3, #4]
 8007362:	609a      	str	r2, [r3, #8]
 8007364:	60da      	str	r2, [r3, #12]
 8007366:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007370:	d147      	bne.n	8007402 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	4b25      	ldr	r3, [pc, #148]	; (800740c <HAL_HCD_MspInit+0xbc>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	4a24      	ldr	r2, [pc, #144]	; (800740c <HAL_HCD_MspInit+0xbc>)
 800737c:	f043 0301 	orr.w	r3, r3, #1
 8007380:	6313      	str	r3, [r2, #48]	; 0x30
 8007382:	4b22      	ldr	r3, [pc, #136]	; (800740c <HAL_HCD_MspInit+0xbc>)
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	f003 0301 	and.w	r3, r3, #1
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800738e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007394:	2300      	movs	r3, #0
 8007396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800739c:	f107 0314 	add.w	r3, r7, #20
 80073a0:	4619      	mov	r1, r3
 80073a2:	481b      	ldr	r0, [pc, #108]	; (8007410 <HAL_HCD_MspInit+0xc0>)
 80073a4:	f7f9 ff7c 	bl	80012a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80073a8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80073ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ae:	2302      	movs	r3, #2
 80073b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b6:	2300      	movs	r3, #0
 80073b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073ba:	230a      	movs	r3, #10
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	4619      	mov	r1, r3
 80073c4:	4812      	ldr	r0, [pc, #72]	; (8007410 <HAL_HCD_MspInit+0xc0>)
 80073c6:	f7f9 ff6b 	bl	80012a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <HAL_HCD_MspInit+0xbc>)
 80073cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ce:	4a0f      	ldr	r2, [pc, #60]	; (800740c <HAL_HCD_MspInit+0xbc>)
 80073d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d4:	6353      	str	r3, [r2, #52]	; 0x34
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	4b0c      	ldr	r3, [pc, #48]	; (800740c <HAL_HCD_MspInit+0xbc>)
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	4a0b      	ldr	r2, [pc, #44]	; (800740c <HAL_HCD_MspInit+0xbc>)
 80073e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073e4:	6453      	str	r3, [r2, #68]	; 0x44
 80073e6:	4b09      	ldr	r3, [pc, #36]	; (800740c <HAL_HCD_MspInit+0xbc>)
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073f2:	2200      	movs	r2, #0
 80073f4:	2100      	movs	r1, #0
 80073f6:	2043      	movs	r0, #67	; 0x43
 80073f8:	f7f9 ff1b 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073fc:	2043      	movs	r0, #67	; 0x43
 80073fe:	f7f9 ff34 	bl	800126a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007402:	bf00      	nop
 8007404:	3728      	adds	r7, #40	; 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40023800 	.word	0x40023800
 8007410:	40020000 	.word	0x40020000

08007414 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff fbb5 	bl	8006b92 <USBH_LL_IncTimer>
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fbed 	bl	8006c1e <USBH_LL_Connect>
}
 8007444:	bf00      	nop
 8007446:	3708      	adds	r7, #8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fbf6 	bl	8006c4c <USBH_LL_Disconnect>
}
 8007460:	bf00      	nop
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	460b      	mov	r3, r1
 8007472:	70fb      	strb	r3, [r7, #3]
 8007474:	4613      	mov	r3, r2
 8007476:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fba7 	bl	8006be6 <USBH_LL_PortEnabled>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fba7 	bl	8006c02 <USBH_LL_PortDisabled>
}
 80074b4:	bf00      	nop
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d12a      	bne.n	8007524 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80074ce:	4a18      	ldr	r2, [pc, #96]	; (8007530 <USBH_LL_Init+0x74>)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a15      	ldr	r2, [pc, #84]	; (8007530 <USBH_LL_Init+0x74>)
 80074da:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <USBH_LL_Init+0x74>)
 80074e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80074e4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80074e6:	4b12      	ldr	r3, [pc, #72]	; (8007530 <USBH_LL_Init+0x74>)
 80074e8:	2208      	movs	r2, #8
 80074ea:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80074ec:	4b10      	ldr	r3, [pc, #64]	; (8007530 <USBH_LL_Init+0x74>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80074f2:	4b0f      	ldr	r3, [pc, #60]	; (8007530 <USBH_LL_Init+0x74>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80074f8:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <USBH_LL_Init+0x74>)
 80074fa:	2202      	movs	r2, #2
 80074fc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80074fe:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <USBH_LL_Init+0x74>)
 8007500:	2200      	movs	r2, #0
 8007502:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007504:	480a      	ldr	r0, [pc, #40]	; (8007530 <USBH_LL_Init+0x74>)
 8007506:	f7fa f87e 	bl	8001606 <HAL_HCD_Init>
 800750a:	4603      	mov	r3, r0
 800750c:	2b00      	cmp	r3, #0
 800750e:	d001      	beq.n	8007514 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007510:	f7f9 faea 	bl	8000ae8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007514:	4806      	ldr	r0, [pc, #24]	; (8007530 <USBH_LL_Init+0x74>)
 8007516:	f7fa fc73 	bl	8001e00 <HAL_HCD_GetCurrentFrame>
 800751a:	4603      	mov	r3, r0
 800751c:	4619      	mov	r1, r3
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff fb28 	bl	8006b74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	200005e4 	.word	0x200005e4

08007534 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007540:	2300      	movs	r3, #0
 8007542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800754a:	4618      	mov	r0, r3
 800754c:	f7fa fbee 	bl	8001d2c <HAL_HCD_Start>
 8007550:	4603      	mov	r3, r0
 8007552:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f912 	bl	8007780 <USBH_Get_USB_Status>
 800755c:	4603      	mov	r3, r0
 800755e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007560:	7bbb      	ldrb	r3, [r7, #14]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007576:	2300      	movs	r3, #0
 8007578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007580:	4618      	mov	r0, r3
 8007582:	f7fa fbf6 	bl	8001d72 <HAL_HCD_Stop>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f8f7 	bl	8007780 <USBH_Get_USB_Status>
 8007592:	4603      	mov	r3, r0
 8007594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007596:	7bbb      	ldrb	r3, [r7, #14]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	4611      	mov	r1, r2
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fa fc0d 	bl	8001dd6 <HAL_HCD_HC_GetXferCount>
 80075bc:	4603      	mov	r3, r0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80075c6:	b590      	push	{r4, r7, lr}
 80075c8:	b089      	sub	sp, #36	; 0x24
 80075ca:	af04      	add	r7, sp, #16
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	4608      	mov	r0, r1
 80075d0:	4611      	mov	r1, r2
 80075d2:	461a      	mov	r2, r3
 80075d4:	4603      	mov	r3, r0
 80075d6:	70fb      	strb	r3, [r7, #3]
 80075d8:	460b      	mov	r3, r1
 80075da:	70bb      	strb	r3, [r7, #2]
 80075dc:	4613      	mov	r3, r2
 80075de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80075ee:	787c      	ldrb	r4, [r7, #1]
 80075f0:	78ba      	ldrb	r2, [r7, #2]
 80075f2:	78f9      	ldrb	r1, [r7, #3]
 80075f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80075f6:	9302      	str	r3, [sp, #8]
 80075f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80075fc:	9301      	str	r3, [sp, #4]
 80075fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4623      	mov	r3, r4
 8007606:	f7fa f860 	bl	80016ca <HAL_HCD_HC_Init>
 800760a:	4603      	mov	r3, r0
 800760c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	4618      	mov	r0, r3
 8007612:	f000 f8b5 	bl	8007780 <USBH_Get_USB_Status>
 8007616:	4603      	mov	r3, r0
 8007618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800761a:	7bbb      	ldrb	r3, [r7, #14]
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	bd90      	pop	{r4, r7, pc}

08007624 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800763e:	78fa      	ldrb	r2, [r7, #3]
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f7fa f8d9 	bl	80017fa <HAL_HCD_HC_Halt>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f896 	bl	8007780 <USBH_Get_USB_Status>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007658:	7bbb      	ldrb	r3, [r7, #14]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007662:	b590      	push	{r4, r7, lr}
 8007664:	b089      	sub	sp, #36	; 0x24
 8007666:	af04      	add	r7, sp, #16
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	4608      	mov	r0, r1
 800766c:	4611      	mov	r1, r2
 800766e:	461a      	mov	r2, r3
 8007670:	4603      	mov	r3, r0
 8007672:	70fb      	strb	r3, [r7, #3]
 8007674:	460b      	mov	r3, r1
 8007676:	70bb      	strb	r3, [r7, #2]
 8007678:	4613      	mov	r3, r2
 800767a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800768a:	787c      	ldrb	r4, [r7, #1]
 800768c:	78ba      	ldrb	r2, [r7, #2]
 800768e:	78f9      	ldrb	r1, [r7, #3]
 8007690:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007694:	9303      	str	r3, [sp, #12]
 8007696:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007698:	9302      	str	r3, [sp, #8]
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	4623      	mov	r3, r4
 80076a6:	f7fa f8cb 	bl	8001840 <HAL_HCD_HC_SubmitRequest>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f865 	bl	8007780 <USBH_Get_USB_Status>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd90      	pop	{r4, r7, pc}

080076c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076d6:	78fa      	ldrb	r2, [r7, #3]
 80076d8:	4611      	mov	r1, r2
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fa fb66 	bl	8001dac <HAL_HCD_HC_GetURBState>
 80076e0:	4603      	mov	r3, r0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d103      	bne.n	8007708 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007700:	78fb      	ldrb	r3, [r7, #3]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f868 	bl	80077d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007708:	20c8      	movs	r0, #200	; 0xc8
 800770a:	f7f9 fc95 	bl	8001038 <HAL_Delay>
  return USBH_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
 8007724:	4613      	mov	r3, r2
 8007726:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800772e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007730:	78fa      	ldrb	r2, [r7, #3]
 8007732:	68f9      	ldr	r1, [r7, #12]
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	440b      	add	r3, r1
 800773e:	333b      	adds	r3, #59	; 0x3b
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00a      	beq.n	800775c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007746:	78fa      	ldrb	r2, [r7, #3]
 8007748:	68f9      	ldr	r1, [r7, #12]
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	440b      	add	r3, r1
 8007754:	3350      	adds	r3, #80	; 0x50
 8007756:	78ba      	ldrb	r2, [r7, #2]
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e009      	b.n	8007770 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800775c:	78fa      	ldrb	r2, [r7, #3]
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	440b      	add	r3, r1
 800776a:	3351      	adds	r3, #81	; 0x51
 800776c:	78ba      	ldrb	r2, [r7, #2]
 800776e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	2b03      	cmp	r3, #3
 8007792:	d817      	bhi.n	80077c4 <USBH_Get_USB_Status+0x44>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <USBH_Get_USB_Status+0x1c>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077b3 	.word	0x080077b3
 80077a4:	080077b9 	.word	0x080077b9
 80077a8:	080077bf 	.word	0x080077bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
    break;
 80077b0:	e00b      	b.n	80077ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80077b2:	2302      	movs	r3, #2
 80077b4:	73fb      	strb	r3, [r7, #15]
    break;
 80077b6:	e008      	b.n	80077ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80077b8:	2301      	movs	r3, #1
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e005      	b.n	80077ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80077be:	2302      	movs	r3, #2
 80077c0:	73fb      	strb	r3, [r7, #15]
    break;
 80077c2:	e002      	b.n	80077ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80077c4:	2302      	movs	r3, #2
 80077c6:	73fb      	strb	r3, [r7, #15]
    break;
 80077c8:	bf00      	nop
  }
  return usb_status;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3714      	adds	r7, #20
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80077e2:	79fb      	ldrb	r3, [r7, #7]
 80077e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d102      	bne.n	80077f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80077ec:	2301      	movs	r3, #1
 80077ee:	73fb      	strb	r3, [r7, #15]
 80077f0:	e001      	b.n	80077f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80077f2:	2300      	movs	r3, #0
 80077f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80077f6:	7bfb      	ldrb	r3, [r7, #15]
 80077f8:	461a      	mov	r2, r3
 80077fa:	2101      	movs	r1, #1
 80077fc:	4803      	ldr	r0, [pc, #12]	; (800780c <MX_DriverVbusFS+0x34>)
 80077fe:	f7f9 fee9 	bl	80015d4 <HAL_GPIO_WritePin>
}
 8007802:	bf00      	nop
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40020800 	.word	0x40020800

08007810 <__errno>:
 8007810:	4b01      	ldr	r3, [pc, #4]	; (8007818 <__errno+0x8>)
 8007812:	6818      	ldr	r0, [r3, #0]
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	2000002c 	.word	0x2000002c

0800781c <__libc_init_array>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4e0d      	ldr	r6, [pc, #52]	; (8007854 <__libc_init_array+0x38>)
 8007820:	4c0d      	ldr	r4, [pc, #52]	; (8007858 <__libc_init_array+0x3c>)
 8007822:	1ba4      	subs	r4, r4, r6
 8007824:	10a4      	asrs	r4, r4, #2
 8007826:	2500      	movs	r5, #0
 8007828:	42a5      	cmp	r5, r4
 800782a:	d109      	bne.n	8007840 <__libc_init_array+0x24>
 800782c:	4e0b      	ldr	r6, [pc, #44]	; (800785c <__libc_init_array+0x40>)
 800782e:	4c0c      	ldr	r4, [pc, #48]	; (8007860 <__libc_init_array+0x44>)
 8007830:	f000 f8ea 	bl	8007a08 <_init>
 8007834:	1ba4      	subs	r4, r4, r6
 8007836:	10a4      	asrs	r4, r4, #2
 8007838:	2500      	movs	r5, #0
 800783a:	42a5      	cmp	r5, r4
 800783c:	d105      	bne.n	800784a <__libc_init_array+0x2e>
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007844:	4798      	blx	r3
 8007846:	3501      	adds	r5, #1
 8007848:	e7ee      	b.n	8007828 <__libc_init_array+0xc>
 800784a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800784e:	4798      	blx	r3
 8007850:	3501      	adds	r5, #1
 8007852:	e7f2      	b.n	800783a <__libc_init_array+0x1e>
 8007854:	08040e70 	.word	0x08040e70
 8007858:	08040e70 	.word	0x08040e70
 800785c:	08040e70 	.word	0x08040e70
 8007860:	08040e74 	.word	0x08040e74

08007864 <malloc>:
 8007864:	4b02      	ldr	r3, [pc, #8]	; (8007870 <malloc+0xc>)
 8007866:	4601      	mov	r1, r0
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	f000 b861 	b.w	8007930 <_malloc_r>
 800786e:	bf00      	nop
 8007870:	2000002c 	.word	0x2000002c

08007874 <free>:
 8007874:	4b02      	ldr	r3, [pc, #8]	; (8007880 <free+0xc>)
 8007876:	4601      	mov	r1, r0
 8007878:	6818      	ldr	r0, [r3, #0]
 800787a:	f000 b80b 	b.w	8007894 <_free_r>
 800787e:	bf00      	nop
 8007880:	2000002c 	.word	0x2000002c

08007884 <memset>:
 8007884:	4402      	add	r2, r0
 8007886:	4603      	mov	r3, r0
 8007888:	4293      	cmp	r3, r2
 800788a:	d100      	bne.n	800788e <memset+0xa>
 800788c:	4770      	bx	lr
 800788e:	f803 1b01 	strb.w	r1, [r3], #1
 8007892:	e7f9      	b.n	8007888 <memset+0x4>

08007894 <_free_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4605      	mov	r5, r0
 8007898:	2900      	cmp	r1, #0
 800789a:	d045      	beq.n	8007928 <_free_r+0x94>
 800789c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078a0:	1f0c      	subs	r4, r1, #4
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bfb8      	it	lt
 80078a6:	18e4      	addlt	r4, r4, r3
 80078a8:	f000 f8ac 	bl	8007a04 <__malloc_lock>
 80078ac:	4a1f      	ldr	r2, [pc, #124]	; (800792c <_free_r+0x98>)
 80078ae:	6813      	ldr	r3, [r2, #0]
 80078b0:	4610      	mov	r0, r2
 80078b2:	b933      	cbnz	r3, 80078c2 <_free_r+0x2e>
 80078b4:	6063      	str	r3, [r4, #4]
 80078b6:	6014      	str	r4, [r2, #0]
 80078b8:	4628      	mov	r0, r5
 80078ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078be:	f000 b8a2 	b.w	8007a06 <__malloc_unlock>
 80078c2:	42a3      	cmp	r3, r4
 80078c4:	d90c      	bls.n	80078e0 <_free_r+0x4c>
 80078c6:	6821      	ldr	r1, [r4, #0]
 80078c8:	1862      	adds	r2, r4, r1
 80078ca:	4293      	cmp	r3, r2
 80078cc:	bf04      	itt	eq
 80078ce:	681a      	ldreq	r2, [r3, #0]
 80078d0:	685b      	ldreq	r3, [r3, #4]
 80078d2:	6063      	str	r3, [r4, #4]
 80078d4:	bf04      	itt	eq
 80078d6:	1852      	addeq	r2, r2, r1
 80078d8:	6022      	streq	r2, [r4, #0]
 80078da:	6004      	str	r4, [r0, #0]
 80078dc:	e7ec      	b.n	80078b8 <_free_r+0x24>
 80078de:	4613      	mov	r3, r2
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	b10a      	cbz	r2, 80078e8 <_free_r+0x54>
 80078e4:	42a2      	cmp	r2, r4
 80078e6:	d9fa      	bls.n	80078de <_free_r+0x4a>
 80078e8:	6819      	ldr	r1, [r3, #0]
 80078ea:	1858      	adds	r0, r3, r1
 80078ec:	42a0      	cmp	r0, r4
 80078ee:	d10b      	bne.n	8007908 <_free_r+0x74>
 80078f0:	6820      	ldr	r0, [r4, #0]
 80078f2:	4401      	add	r1, r0
 80078f4:	1858      	adds	r0, r3, r1
 80078f6:	4282      	cmp	r2, r0
 80078f8:	6019      	str	r1, [r3, #0]
 80078fa:	d1dd      	bne.n	80078b8 <_free_r+0x24>
 80078fc:	6810      	ldr	r0, [r2, #0]
 80078fe:	6852      	ldr	r2, [r2, #4]
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	4401      	add	r1, r0
 8007904:	6019      	str	r1, [r3, #0]
 8007906:	e7d7      	b.n	80078b8 <_free_r+0x24>
 8007908:	d902      	bls.n	8007910 <_free_r+0x7c>
 800790a:	230c      	movs	r3, #12
 800790c:	602b      	str	r3, [r5, #0]
 800790e:	e7d3      	b.n	80078b8 <_free_r+0x24>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	1821      	adds	r1, r4, r0
 8007914:	428a      	cmp	r2, r1
 8007916:	bf04      	itt	eq
 8007918:	6811      	ldreq	r1, [r2, #0]
 800791a:	6852      	ldreq	r2, [r2, #4]
 800791c:	6062      	str	r2, [r4, #4]
 800791e:	bf04      	itt	eq
 8007920:	1809      	addeq	r1, r1, r0
 8007922:	6021      	streq	r1, [r4, #0]
 8007924:	605c      	str	r4, [r3, #4]
 8007926:	e7c7      	b.n	80078b8 <_free_r+0x24>
 8007928:	bd38      	pop	{r3, r4, r5, pc}
 800792a:	bf00      	nop
 800792c:	200000c8 	.word	0x200000c8

08007930 <_malloc_r>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	1ccd      	adds	r5, r1, #3
 8007934:	f025 0503 	bic.w	r5, r5, #3
 8007938:	3508      	adds	r5, #8
 800793a:	2d0c      	cmp	r5, #12
 800793c:	bf38      	it	cc
 800793e:	250c      	movcc	r5, #12
 8007940:	2d00      	cmp	r5, #0
 8007942:	4606      	mov	r6, r0
 8007944:	db01      	blt.n	800794a <_malloc_r+0x1a>
 8007946:	42a9      	cmp	r1, r5
 8007948:	d903      	bls.n	8007952 <_malloc_r+0x22>
 800794a:	230c      	movs	r3, #12
 800794c:	6033      	str	r3, [r6, #0]
 800794e:	2000      	movs	r0, #0
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	f000 f857 	bl	8007a04 <__malloc_lock>
 8007956:	4a21      	ldr	r2, [pc, #132]	; (80079dc <_malloc_r+0xac>)
 8007958:	6814      	ldr	r4, [r2, #0]
 800795a:	4621      	mov	r1, r4
 800795c:	b991      	cbnz	r1, 8007984 <_malloc_r+0x54>
 800795e:	4c20      	ldr	r4, [pc, #128]	; (80079e0 <_malloc_r+0xb0>)
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	b91b      	cbnz	r3, 800796c <_malloc_r+0x3c>
 8007964:	4630      	mov	r0, r6
 8007966:	f000 f83d 	bl	80079e4 <_sbrk_r>
 800796a:	6020      	str	r0, [r4, #0]
 800796c:	4629      	mov	r1, r5
 800796e:	4630      	mov	r0, r6
 8007970:	f000 f838 	bl	80079e4 <_sbrk_r>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d124      	bne.n	80079c2 <_malloc_r+0x92>
 8007978:	230c      	movs	r3, #12
 800797a:	6033      	str	r3, [r6, #0]
 800797c:	4630      	mov	r0, r6
 800797e:	f000 f842 	bl	8007a06 <__malloc_unlock>
 8007982:	e7e4      	b.n	800794e <_malloc_r+0x1e>
 8007984:	680b      	ldr	r3, [r1, #0]
 8007986:	1b5b      	subs	r3, r3, r5
 8007988:	d418      	bmi.n	80079bc <_malloc_r+0x8c>
 800798a:	2b0b      	cmp	r3, #11
 800798c:	d90f      	bls.n	80079ae <_malloc_r+0x7e>
 800798e:	600b      	str	r3, [r1, #0]
 8007990:	50cd      	str	r5, [r1, r3]
 8007992:	18cc      	adds	r4, r1, r3
 8007994:	4630      	mov	r0, r6
 8007996:	f000 f836 	bl	8007a06 <__malloc_unlock>
 800799a:	f104 000b 	add.w	r0, r4, #11
 800799e:	1d23      	adds	r3, r4, #4
 80079a0:	f020 0007 	bic.w	r0, r0, #7
 80079a4:	1ac3      	subs	r3, r0, r3
 80079a6:	d0d3      	beq.n	8007950 <_malloc_r+0x20>
 80079a8:	425a      	negs	r2, r3
 80079aa:	50e2      	str	r2, [r4, r3]
 80079ac:	e7d0      	b.n	8007950 <_malloc_r+0x20>
 80079ae:	428c      	cmp	r4, r1
 80079b0:	684b      	ldr	r3, [r1, #4]
 80079b2:	bf16      	itet	ne
 80079b4:	6063      	strne	r3, [r4, #4]
 80079b6:	6013      	streq	r3, [r2, #0]
 80079b8:	460c      	movne	r4, r1
 80079ba:	e7eb      	b.n	8007994 <_malloc_r+0x64>
 80079bc:	460c      	mov	r4, r1
 80079be:	6849      	ldr	r1, [r1, #4]
 80079c0:	e7cc      	b.n	800795c <_malloc_r+0x2c>
 80079c2:	1cc4      	adds	r4, r0, #3
 80079c4:	f024 0403 	bic.w	r4, r4, #3
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d005      	beq.n	80079d8 <_malloc_r+0xa8>
 80079cc:	1a21      	subs	r1, r4, r0
 80079ce:	4630      	mov	r0, r6
 80079d0:	f000 f808 	bl	80079e4 <_sbrk_r>
 80079d4:	3001      	adds	r0, #1
 80079d6:	d0cf      	beq.n	8007978 <_malloc_r+0x48>
 80079d8:	6025      	str	r5, [r4, #0]
 80079da:	e7db      	b.n	8007994 <_malloc_r+0x64>
 80079dc:	200000c8 	.word	0x200000c8
 80079e0:	200000cc 	.word	0x200000cc

080079e4 <_sbrk_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4c06      	ldr	r4, [pc, #24]	; (8007a00 <_sbrk_r+0x1c>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4605      	mov	r5, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	f7f9 fa3a 	bl	8000e68 <_sbrk>
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d102      	bne.n	80079fe <_sbrk_r+0x1a>
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	b103      	cbz	r3, 80079fe <_sbrk_r+0x1a>
 80079fc:	602b      	str	r3, [r5, #0]
 80079fe:	bd38      	pop	{r3, r4, r5, pc}
 8007a00:	200008a8 	.word	0x200008a8

08007a04 <__malloc_lock>:
 8007a04:	4770      	bx	lr

08007a06 <__malloc_unlock>:
 8007a06:	4770      	bx	lr

08007a08 <_init>:
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0a:	bf00      	nop
 8007a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0e:	bc08      	pop	{r3}
 8007a10:	469e      	mov	lr, r3
 8007a12:	4770      	bx	lr

08007a14 <_fini>:
 8007a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a16:	bf00      	nop
 8007a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1a:	bc08      	pop	{r3}
 8007a1c:	469e      	mov	lr, r3
 8007a1e:	4770      	bx	lr
